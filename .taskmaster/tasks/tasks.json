{
  "master": {
    "tasks": [
      {
        "id": "1",
        "title": "Setup Bun monorepo directory structure",
        "description": "Create monorepo directories and configure Bun workspace in root package.json",
        "details": "Create apps/, packages/, supabase/ directories. Update root package.json with Bun workspace configuration. Move existing src/ content to apps/frontend/. Configure workspaces to include apps/* and packages/*.",
        "testStrategy": "Verify Bun workspace commands work and all directories are properly created",
        "priority": "high",
        "dependencies": [],
        "status": "done",
        "subtasks": [
          {
            "id": 1,
            "title": "Create monorepo directory structure",
            "description": "Set up the basic directory structure for the monorepo",
            "dependencies": [],
            "details": "Create the following directories: apps/, packages/, supabase/. These will contain the different parts of our monorepo structure.",
            "status": "done",
            "testStrategy": "All directories exist and are properly structured",
            "parentId": "1"
          },
          {
            "id": 2,
            "title": "Configure Bun workspace in package.json",
            "description": "Update root package.json to define workspace structure",
            "dependencies": [
              "1.1"
            ],
            "details": "Add workspaces configuration to root package.json that includes 'apps/*' and 'packages/*' to enable Bun workspace functionality.",
            "status": "done",
            "testStrategy": "Bun workspace commands recognize all workspace packages",
            "parentId": "1"
          },
          {
            "id": 3,
            "title": "Move existing frontend code to apps/frontend",
            "description": "Relocate current React application to new monorepo structure",
            "dependencies": [
              "1.2"
            ],
            "details": "Move src/, public/, index.html, and other frontend files to apps/frontend/. Update any relative paths that may have broken.",
            "status": "done",
            "testStrategy": "Frontend application runs successfully from new location",
            "parentId": "1"
          },
          {
            "id": 4,
            "title": "Update package.json scripts for monorepo",
            "description": "Modify scripts to work with new monorepo structure",
            "dependencies": [
              "1.3"
            ],
            "details": "Update npm/bun scripts in root package.json to handle workspace operations. Add scripts for building, testing, and running different parts of the monorepo.",
            "status": "done",
            "testStrategy": "All scripts run correctly and target appropriate workspace packages",
            "parentId": "1"
          }
        ],
        "updatedAt": "2025-10-02T09:54:42.776Z",
        "complexity": 3,
        "recommendedSubtasks": 4,
        "expansionPrompt": "Break down monorepo setup into: 1) Create directory structure (apps/, packages/, supabase/), 2) Configure root package.json with Bun workspaces, 3) Move existing content to apps/frontend/, 4) Validate workspace configuration and commands work correctly."
      },
      {
        "id": "2",
        "title": "Setup comprehensive testing infrastructure",
        "description": "Implement complete testing strategy with Mocha (BE), Vitest (FE), and Playwright (E2E)",
        "details": "Configure testing frameworks for all layers: Backend unit/integration tests with Mocha+Chai, Frontend component tests with Vitest, E2E tests with Playwright. Focus on behavior testing over mocking. Set up test coverage reporting and CI/CD integration.",
        "testStrategy": "All test suites run successfully, coverage reports generated, E2E tests pass in CI/CD",
        "priority": "high",
        "dependencies": [
          "1"
        ],
        "status": "done",
        "subtasks": [
          {
            "id": 1,
            "title": "Setup Backend testing with Mocha + Chai",
            "description": "Configure Mocha and Chai for backend unit and integration testing",
            "dependencies": [],
            "details": "Install mocha, chai, chai-http, sinon. Configure test scripts in package.json. Set up test database for integration tests. Create test utilities and helpers.",
            "status": "done",
            "testStrategy": "Mocha tests run successfully, test database setup works",
            "parentId": "2",
            "updatedAt": "2025-10-02T17:10:02.689Z"
          },
          {
            "id": 2,
            "title": "Setup Frontend testing with Vitest",
            "description": "Configure Vitest for React component and utility testing",
            "dependencies": [],
            "details": "Install vitest, @testing-library/react, @testing-library/jest-dom, jsdom. Configure vitest.config.ts. Set up test utilities and custom render functions.",
            "status": "done",
            "testStrategy": "Vitest tests run successfully, React components render correctly",
            "parentId": "2",
            "updatedAt": "2025-10-02T17:10:25.515Z"
          },
          {
            "id": 3,
            "title": "Setup Playwright E2E testing",
            "description": "Configure Playwright for end-to-end testing with browser MCP integration",
            "dependencies": [],
            "details": "Install playwright, configure playwright.config.ts. Set up browser MCP integration for automated testing. Create E2E test utilities and page objects.",
            "status": "done",
            "testStrategy": "Playwright tests run successfully, browser MCP integration works",
            "parentId": "2",
            "updatedAt": "2025-10-02T17:19:58.835Z"
          },
          {
            "id": 4,
            "title": "Implement test coverage reporting",
            "description": "Set up comprehensive test coverage reporting for all test types",
            "dependencies": [
              "2.1",
              "2.2"
            ],
            "details": "Configure coverage tools: nyc for Mocha, @vitest/coverage for Vitest. Set up coverage thresholds and reporting. Integrate with CI/CD for coverage tracking.",
            "status": "done",
            "testStrategy": "Coverage reports generated, thresholds met, CI/CD integration works",
            "parentId": "2",
            "updatedAt": "2025-10-02T17:20:34.817Z"
          }
        ],
        "updatedAt": "2025-10-02T17:20:34.817Z",
        "complexity": 5,
        "recommendedSubtasks": 3,
        "expansionPrompt": "Break down this task with a focus on move existing frontend to apps/frontend."
      },
      {
        "id": "3",
        "title": "Move existing frontend to apps/frontend",
        "description": "Relocate current React frontend code to new monorepo structure",
        "details": "Move src/, public/, index.html, vite.config.ts to apps/frontend/. Update all import paths to use absolute imports. Update package.json scripts for frontend-specific commands. Configure TypeScript paths for workspace packages.",
        "testStrategy": "Frontend builds and runs successfully from new location",
        "priority": "high",
        "dependencies": [
          "1"
        ],
        "status": "done",
        "subtasks": [
          {
            "id": 1,
            "title": "Create apps/frontend directory structure and move core files",
            "description": "Create the new directory structure and move essential frontend files to apps/frontend",
            "dependencies": [],
            "details": "Create apps/frontend/ directory. Move src/, public/, index.html, and vite.config.ts from root to apps/frontend/. Update package.json to reflect new structure. Ensure all static assets and configuration files are properly relocated.",
            "status": "done",
            "testStrategy": "",
            "parentId": "3",
            "updatedAt": "2025-10-03T06:42:14.372Z"
          },
          {
            "id": 2,
            "title": "Update import paths and TypeScript configuration",
            "description": "Convert relative imports to absolute imports and configure TypeScript paths for workspace packages",
            "dependencies": [
              "3.1"
            ],
            "details": "Update all import statements in src/ to use absolute paths. Configure tsconfig.json with baseUrl and paths mapping for workspace packages. Update vite.config.ts to handle new import structure. Ensure TypeScript can resolve imports from packages/shared and other workspace packages.",
            "status": "done",
            "testStrategy": "",
            "parentId": "3",
            "updatedAt": "2025-10-03T06:42:17.738Z"
          },
          {
            "id": 3,
            "title": "Update build scripts and validate frontend functionality",
            "description": "Configure package.json scripts for frontend-specific commands and verify everything works",
            "dependencies": [
              "3.2"
            ],
            "details": "Update package.json scripts to work from apps/frontend/ location. Configure build, dev, and test scripts. Update any CI/CD references to new frontend path. Test that frontend builds successfully, dev server starts, and all imports resolve correctly from new location.",
            "status": "done",
            "testStrategy": "",
            "parentId": "3",
            "updatedAt": "2025-10-03T06:42:18.393Z"
          }
        ],
        "updatedAt": "2025-10-03T06:42:18.393Z",
        "complexity": 5,
        "recommendedSubtasks": 3,
        "expansionPrompt": "Break down this task with a focus on create packages/shared foundation."
      },
      {
        "id": "4",
        "title": "Create packages/shared foundation",
        "description": "Initialize shared types and utilities package for monorepo",
        "details": "Create packages/shared/ with TypeScript configuration. Set up build scripts using Bun. Create basic package.json with proper exports. Configure tsconfig.json for shared package compilation.",
        "testStrategy": "Shared package builds successfully and can be imported by other workspace packages",
        "priority": "high",
        "dependencies": [
          "1"
        ],
        "status": "done",
        "subtasks": [
          {
            "id": 1,
            "title": "Create packages/shared directory structure and package.json",
            "description": "Set up the basic directory structure and package configuration for the shared package",
            "dependencies": [],
            "details": "Create packages/shared/ directory. Initialize package.json with proper name (@wag-wise-mentor/shared), version, exports configuration, and dependencies. Set up proper entry points for TypeScript compilation and distribution.",
            "status": "done",
            "testStrategy": "",
            "parentId": "undefined",
            "updatedAt": "2025-10-03T06:42:23.365Z"
          },
          {
            "id": 2,
            "title": "Configure TypeScript compilation for shared package",
            "description": "Set up TypeScript configuration and build system for the shared package",
            "dependencies": [
              "3.1"
            ],
            "details": "Create tsconfig.json with appropriate compiler options for a shared library. Configure build scripts using Bun for TypeScript compilation. Set up proper output directories and declaration file generation.",
            "status": "done",
            "testStrategy": "",
            "parentId": "undefined",
            "updatedAt": "2025-10-03T06:42:23.999Z"
          },
          {
            "id": 3,
            "title": "Create initial shared types and utilities structure",
            "description": "Implement basic shared types and utility functions for the monorepo",
            "dependencies": [
              "3.2"
            ],
            "details": "Create src/types/ directory with common TypeScript interfaces and types. Create src/utils/ directory with shared utility functions. Set up index.ts files for proper exports. Ensure all exports are properly configured in package.json.",
            "status": "done",
            "testStrategy": "",
            "parentId": "undefined",
            "updatedAt": "2025-10-03T06:42:24.622Z"
          }
        ],
        "updatedAt": "2025-10-03T06:42:24.622Z",
        "complexity": 5,
        "recommendedSubtasks": 3,
        "expansionPrompt": "Break down this task with a focus on create packages/ui foundation."
      },
      {
        "id": "5",
        "title": "Create packages/ui foundation",
        "description": "Initialize shared UI components package",
        "details": "Create packages/ui/ for reusable React components. Move current components/ui/ to packages/ui/. Configure build process for UI package. Set up proper exports in package.json for component importing.",
        "testStrategy": "UI package builds and components can be imported from other packages",
        "priority": "high",
        "dependencies": [
          "1"
        ],
        "status": "done",
        "subtasks": [
          {
            "id": 1,
            "title": "Create packages/ui directory structure and package.json",
            "description": "Set up the foundational directory structure for the UI package with proper package configuration",
            "dependencies": [],
            "details": "Create packages/ui/ directory. Initialize package.json with proper name (@workspace/ui), version, and basic dependencies. Configure proper exports for component importing. Set up TypeScript configuration specific to UI components.",
            "status": "done",
            "testStrategy": "",
            "parentId": "undefined",
            "updatedAt": "2025-10-03T06:42:29.112Z"
          },
          {
            "id": 2,
            "title": "Move existing components from components/ui to packages/ui",
            "description": "Migrate current UI components to the new packages/ui location while preserving functionality",
            "dependencies": [
              "4.1"
            ],
            "details": "Move all files from components/ui/ to packages/ui/src/. Update import paths throughout the codebase to use the new package location. Ensure all existing UI components remain functional after the move.",
            "status": "done",
            "testStrategy": "",
            "parentId": "undefined",
            "updatedAt": "2025-10-03T06:42:29.744Z"
          },
          {
            "id": 3,
            "title": "Configure build process and exports for UI package",
            "description": "Set up build tooling and proper package exports for the UI components package",
            "dependencies": [
              "4.2"
            ],
            "details": "Configure Bun build scripts for the UI package. Set up proper module exports in package.json to allow importing components from other packages. Configure TypeScript declaration file generation. Test that components can be imported from other workspace packages.",
            "status": "done",
            "testStrategy": "",
            "parentId": "undefined",
            "updatedAt": "2025-10-03T06:42:30.365Z"
          }
        ],
        "updatedAt": "2025-10-03T06:42:30.365Z",
        "complexity": 5,
        "recommendedSubtasks": 3,
        "expansionPrompt": "Break down this task with a focus on initialize nestjs backend structure."
      },
      {
        "id": "6",
        "title": "Initialize NestJS backend structure with DDD architecture",
        "description": "Create NestJS application in apps/backend with Domain-Driven Design architecture",
        "details": "Use NestJS CLI to generate apps/backend/. Implement DDD architecture with Domain Layer (entities, value objects, domain services), Application Layer (use cases, application services), Infrastructure Layer (repositories, controllers, adapters). Configure dependency injection with proper abstraction layers. Set up Supabase client integration. Configure environment variables and CORS for frontend communication. All code must be self-documenting through clear naming and structure - no comments allowed except AAA comments in tests.\n\n**MANDATORY DOCUMENTATION REFERENCES:**\n- Follow environment setup guidelines in docs/environment-variables.md for .env configuration, symlinks, and security considerations\n- Implement all testing using AAA pattern as specified in docs/testing-strategy.md with Mocha + Chai and in-memory providers\n- Adhere to DDD architecture principles and monorepo structure outlined in docs/project-plan.md Phase 1 requirements",
        "testStrategy": "Backend starts successfully, DDD architecture is properly implemented, dependency injection works, comprehensive tests pass with AAA pattern using in-memory providers as per docs/testing-strategy.md, and all production code is comment-free",
        "priority": "high",
        "dependencies": [
          "1"
        ],
        "status": "done",
        "subtasks": [
          {
            "id": 1,
            "title": "Generate NestJS application structure with DDD layers",
            "description": "Use NestJS CLI to create the backend application with DDD architecture",
            "dependencies": [],
            "details": "Run 'nest new backend' in apps/ directory. Create Domain Layer (src/domain/) with entities, value objects, and domain services. Create Application Layer (src/application/) with use cases and application services. Create Infrastructure Layer (src/infrastructure/) with repositories, controllers, and adapters. Configure dependency injection with proper abstraction layers. Follow docs/environment-variables.md for .env symlink setup and docs/project-plan.md DDD architecture guidelines. Remove all comments from production code - use clear method and variable names instead.",
            "status": "done",
            "testStrategy": "DDD layers are properly structured, dependency injection works as per docs/testing-strategy.md AAA pattern, and production code contains no comments",
            "parentId": "undefined",
            "updatedAt": "2025-10-16T12:11:41.676Z"
          },
          {
            "id": 2,
            "title": "Create core module structure",
            "description": "Generate and configure the main application modules for auth, puppies, calendar, training, ai, and analytics",
            "dependencies": [
              "6.1"
            ],
            "details": "Use NestJS CLI to generate modules: nest g module auth, nest g module puppies, nest g module calendar, nest g module training, nest g module ai, nest g module analytics. Create basic service and controller files for each module. Configure module imports in app.module.ts. Follow DDD module organization patterns from docs/project-plan.md and implement proper testing setup per docs/testing-strategy.md. All production code must be self-documenting without comments.",
            "status": "done",
            "testStrategy": "All modules generate correctly, follow AAA testing pattern from docs/testing-strategy.md, and contain no comments in production code",
            "testsAdded": "110 comprehensive tests added for Training (36 tests), AI (37 tests), and Analytics (37 tests) modules. All tests follow AAA pattern with use case tests, repository tests, and controller integration tests. Total backend tests: 262 passing. See apps/backend/TEST_COVERAGE.md for details.",
            "parentId": "undefined",
            "updatedAt": "2025-10-10T00:00:00.000Z"
          },
          {
            "id": 3,
            "title": "Configure environment and external integrations",
            "description": "Set up environment variables, Supabase client integration, and CORS configuration",
            "dependencies": [
              "6.2"
            ],
            "details": "Create .env configuration files for development and production following docs/environment-variables.md guidelines. Install and configure @supabase/supabase-js client. Set up ConfigModule for environment variable management. Configure CORS settings in main.ts for frontend communication. Create Supabase service provider for database operations. Ensure all configuration follows security considerations from docs/environment-variables.md. Use descriptive variable and method names instead of comments.",
            "status": "done",
            "testStrategy": "Environment configuration works correctly, follows security guidelines from docs/environment-variables.md with proper testing per docs/testing-strategy.md, and contains no comments",
            "testsAdded": "7 comprehensive tests for Supabase configuration and service. Tests cover: valid configuration, missing configuration, fallback mechanisms, query/command execution, and error handling. All tests follow AAA pattern. Security best practices documented in apps/backend/SECURITY.md. Total tests: 169 passing.",
            "parentId": "undefined",
            "updatedAt": "2025-10-10T00:00:00.000Z"
          },
          {
            "id": 4,
            "title": "Implement Supabase repository implementations for production",
            "description": "Create production-ready Supabase repository implementations for all modules (Auth, Puppy, Calendar, Training, AI, Analytics)",
            "dependencies": [
              "6.3"
            ],
            "details": "Currently all modules use in-memory repositories which are only suitable for testing. Implement concrete Supabase repository classes that extend the abstract repository classes from the domain layer. Each repository must use the SupabaseService for database operations. Create supabase-user.repository.ts, supabase-puppy.repository.ts, supabase-event.repository.ts, supabase-training.repository.ts, supabase-ai.repository.ts, and supabase-analytics.repository.ts. Update module providers to use environment-based repository selection (InMemory for tests, Supabase for production). Map domain entities to/from Supabase table schemas. Implement proper error handling and transaction support. Follow DDD patterns from docs/project-plan.md and ensure all code is self-documenting without comments.",
            "status": "done",
            "testStrategy": "Supabase repositories implement all abstract repository methods, integrate correctly with SupabaseService, handle errors gracefully, map entities properly, and work in production environment. Integration tests verify database operations using real Supabase instance. In-memory repositories remain for unit testing. All tests follow AAA pattern from docs/testing-strategy.md.",
            "parentId": "undefined",
            "updatedAt": "2025-10-16T12:26:51.308Z"
          }
        ],
        "updatedAt": "2025-10-16T12:26:51.308Z",
        "complexity": 4,
        "recommendedSubtasks": 5,
        "expansionPrompt": "Create shared types package: 1) Extract existing Supabase types to packages/shared/, 2) Create API DTOs for request/response interfaces, 3) Build Zod validation schemas, 4) Define application enums and constants, 5) Configure proper package exports and TypeScript compilation."
      },
      {
        "id": "7",
        "title": "Implement shared type definitions",
        "description": "Create comprehensive TypeScript types based on existing Supabase schema",
        "details": "Extract database types from existing types.ts into packages/shared/. Create API DTOs for request/response interfaces. Build Zod validation schemas for all data models. Define enums and constants. Export all types properly. All TypeScript interfaces and types must be self-explanatory through naming - no comments allowed.\n\n**MANDATORY DOCUMENTATION REFERENCES:**\n- Follow package structure and TypeScript configuration guidelines from docs/project-plan.md shared packages section\n- Implement validation using patterns from docs/testing-strategy.md with comprehensive testing coverage\n- Use environment-agnostic type definitions that work with configuration from docs/environment-variables.md",
        "testStrategy": "Types compile without errors, can be imported in frontend and backend, validation tests follow AAA pattern from docs/testing-strategy.md, and all type definitions are comment-free",
        "priority": "high",
        "dependencies": [
          "4"
        ],
        "status": "pending",
        "subtasks": [
          {
            "id": 1,
            "title": "Extract and reorganize Supabase database types",
            "description": "Move existing database types from types.ts to packages/shared/types/database.ts",
            "dependencies": [],
            "details": "Extract all Supabase-generated types from the existing types.ts file and organize them into a dedicated database types module in the shared package. Clean up and organize the type definitions for better maintainability. Follow packages/shared/ structure from docs/project-plan.md and implement proper TypeScript configuration. Use descriptive type names that eliminate need for comments.",
            "status": "pending",
            "testStrategy": "Types extract correctly, compile without errors, follow testing guidelines from docs/testing-strategy.md, and are self-documenting without comments",
            "parentId": "undefined"
          },
          {
            "id": 2,
            "title": "Create API DTO interfaces",
            "description": "Define request and response interfaces for all API endpoints",
            "dependencies": [
              "7.1"
            ],
            "details": "Create comprehensive DTO (Data Transfer Object) interfaces for all API request and response payloads. Include user authentication, dog profiles, care plans, notifications, and other domain-specific DTOs. Follow DDD principles from docs/project-plan.md and ensure DTOs align with backend architecture. Use clear interface names that describe their purpose without requiring comments.",
            "status": "pending",
            "testStrategy": "DTOs provide type safety and validation as per docs/testing-strategy.md AAA pattern, and are self-explanatory without comments",
            "parentId": "undefined"
          },
          {
            "id": 3,
            "title": "Build Zod validation schemas",
            "description": "Create Zod schemas for runtime validation of all data models",
            "dependencies": [
              "7.1",
              "7.2"
            ],
            "details": "Implement Zod validation schemas that correspond to the database types and API DTOs. Include proper validation rules for all fields, including optional fields, enums, and complex nested objects. Follow validation patterns from docs/testing-strategy.md and ensure schemas work with environment configuration from docs/environment-variables.md. Schema names and structure should be self-explanatory.",
            "status": "pending",
            "testStrategy": "Validation schemas work correctly with comprehensive test coverage using AAA pattern from docs/testing-strategy.md, and schema definitions contain no comments",
            "parentId": "undefined"
          },
          {
            "id": 4,
            "title": "Define application enums and constants",
            "description": "Create shared enums and constants used across the application",
            "dependencies": [
              "7.1"
            ],
            "details": "Define all application-wide enums (user roles, notification types, care plan statuses, etc.) and constants (validation limits, default values, configuration options) in a centralized location. Follow domain language principles from docs/project-plan.md DDD architecture. Use descriptive enum and constant names that convey meaning without comments.",
            "status": "pending",
            "testStrategy": "Enums and constants are properly typed, tested following docs/testing-strategy.md guidelines, and self-documenting without comments",
            "parentId": "undefined"
          },
          {
            "id": 5,
            "title": "Configure package exports and TypeScript compilation",
            "description": "Set up proper package.json exports and TypeScript configuration for the shared types package",
            "dependencies": [
              "7.1",
              "7.2",
              "7.3",
              "7.4"
            ],
            "details": "Configure package.json with proper exports mapping, set up TypeScript compilation with appropriate tsconfig.json, ensure all types are properly exported and can be imported by both frontend and backend packages. Follow monorepo configuration guidelines from docs/project-plan.md. Configuration files should be self-explanatory through clear structure.",
            "status": "pending",
            "testStrategy": "Package builds correctly, types import properly across monorepo, build validation follows docs/testing-strategy.md, and configuration is comment-free",
            "parentId": "undefined"
          }
        ],
        "complexity": 5,
        "recommendedSubtasks": 3,
        "expansionPrompt": "Break down this task with a focus on build authentication backend module."
      },
      {
        "id": "7",
        "title": "Implement shared type definitions",
        "description": "Create comprehensive TypeScript types based on existing Supabase schema",
        "details": "Extract database types from existing types.ts into packages/shared/. Create API DTOs for request/response interfaces. Build Zod validation schemas for all data models. Define enums and constants. Export all types properly. All TypeScript interfaces and types must be self-explanatory through naming - no comments allowed.\n\n**MANDATORY DOCUMENTATION REFERENCES:**\n- Follow package structure and TypeScript configuration guidelines from docs/project-plan.md shared packages section\n- Implement validation using patterns from docs/testing-strategy.md with comprehensive testing coverage\n- Use environment-agnostic type definitions that work with configuration from docs/environment-variables.md",
        "testStrategy": "Types compile without errors, can be imported in frontend and backend, validation tests follow AAA pattern from docs/testing-strategy.md, and all type definitions are comment-free",
        "priority": "high",
        "dependencies": [
          "4"
        ],
        "status": "pending",
        "subtasks": [
          {
            "id": 1,
            "title": "Extract and reorganize Supabase database types",
            "description": "Move existing database types from types.ts to packages/shared/types/database.ts",
            "dependencies": [],
            "details": "Extract all Supabase-generated types from the existing types.ts file and organize them into a dedicated database types module in the shared package. Clean up and organize the type definitions for better maintainability. Follow packages/shared/ structure from docs/project-plan.md and implement proper TypeScript configuration. Use descriptive type names that eliminate need for comments.",
            "status": "pending",
            "testStrategy": "Types extract correctly, compile without errors, follow testing guidelines from docs/testing-strategy.md, and are self-documenting without comments",
            "parentId": "undefined"
          },
          {
            "id": 2,
            "title": "Create API DTO interfaces",
            "description": "Define request and response interfaces for all API endpoints",
            "dependencies": [
              "7.1"
            ],
            "details": "Create comprehensive DTO (Data Transfer Object) interfaces for all API request and response payloads. Include user authentication, dog profiles, care plans, notifications, and other domain-specific DTOs. Follow DDD principles from docs/project-plan.md and ensure DTOs align with backend architecture. Use clear interface names that describe their purpose without requiring comments.",
            "status": "pending",
            "testStrategy": "DTOs provide type safety and validation as per docs/testing-strategy.md AAA pattern, and are self-explanatory without comments",
            "parentId": "undefined"
          },
          {
            "id": 3,
            "title": "Build Zod validation schemas",
            "description": "Create Zod schemas for runtime validation of all data models",
            "dependencies": [
              "7.1",
              "7.2"
            ],
            "details": "Implement Zod validation schemas that correspond to the database types and API DTOs. Include proper validation rules for all fields, including optional fields, enums, and complex nested objects. Follow validation patterns from docs/testing-strategy.md and ensure schemas work with environment configuration from docs/environment-variables.md. Schema names and structure should be self-explanatory.",
            "status": "pending",
            "testStrategy": "Validation schemas work correctly with comprehensive test coverage using AAA pattern from docs/testing-strategy.md, and schema definitions contain no comments",
            "parentId": "undefined"
          },
          {
            "id": 4,
            "title": "Define application enums and constants",
            "description": "Create shared enums and constants used across the application",
            "dependencies": [
              "7.1"
            ],
            "details": "Define all application-wide enums (user roles, notification types, care plan statuses, etc.) and constants (validation limits, default values, configuration options) in a centralized location. Follow domain language principles from docs/project-plan.md DDD architecture. Use descriptive enum and constant names that convey meaning without comments.",
            "status": "pending",
            "testStrategy": "Enums and constants are properly typed, tested following docs/testing-strategy.md guidelines, and self-documenting without comments",
            "parentId": "undefined"
          },
          {
            "id": 5,
            "title": "Configure package exports and TypeScript compilation",
            "description": "Set up proper package.json exports and TypeScript configuration for the shared types package",
            "dependencies": [
              "7.1",
              "7.2",
              "7.3",
              "7.4"
            ],
            "details": "Configure package.json with proper exports mapping, set up TypeScript compilation with appropriate tsconfig.json, ensure all types are properly exported and can be imported by both frontend and backend packages. Follow monorepo configuration guidelines from docs/project-plan.md. Configuration files should be self-explanatory through clear structure.",
            "status": "pending",
            "testStrategy": "Package builds correctly, types import properly across monorepo, build validation follows docs/testing-strategy.md, and configuration is comment-free",
            "parentId": "undefined"
          }
        ],
        "complexity": 5,
        "recommendedSubtasks": 3,
        "expansionPrompt": "Break down this task with a focus on build authentication backend module."
      },
      {
        "id": "8",
        "title": "Build authentication backend module",
        "description": "Implement NestJS auth module with Supabase integration",
        "details": "Create auth module with JWT guards. Implement Supabase Auth integration. Build role-based access control guards. Create user registration/login endpoints. Implement password reset functionality. Add email verification endpoints. All authentication logic must be self-documenting through clear method names and structure - no comments in production code.\n\n**MANDATORY DOCUMENTATION REFERENCES:**\n- Follow environment configuration for Supabase Auth keys from docs/environment-variables.md\n- Implement DDD architecture patterns from docs/project-plan.md Phase 1 backend requirements\n- Use AAA testing pattern with in-memory providers as specified in docs/testing-strategy.md",
        "testStrategy": "Authentication endpoints work correctly, JWT tokens validate properly, comprehensive testing follows AAA pattern from docs/testing-strategy.md, and all production code is comment-free",
        "priority": "high",
        "dependencies": [
          "6",
          "7"
        ],
        "status": "pending",
        "subtasks": [
          {
            "id": 1,
            "title": "Set up NestJS auth module structure with Supabase integration",
            "description": "Create the foundational auth module with Supabase client configuration and basic JWT setup",
            "dependencies": [],
            "details": "Generate NestJS auth module using CLI. Install and configure Supabase client for authentication. Set up JWT module and strategy configuration. Create auth service with basic Supabase Auth integration. Configure environment variables for Supabase credentials following docs/environment-variables.md security guidelines. Use descriptive service and method names that eliminate need for comments.",
            "status": "pending",
            "testStrategy": "Auth module integrates properly with Supabase, follows AAA testing pattern from docs/testing-strategy.md, and contains no comments in production code",
            "parentId": "undefined"
          },
          {
            "id": 2,
            "title": "Implement user authentication endpoints and guards",
            "description": "Build registration, login, password reset, and email verification endpoints with JWT guards",
            "dependencies": [
              "8.1"
            ],
            "details": "Create user registration endpoint with Supabase Auth signup. Implement login endpoint with JWT token generation. Build password reset functionality using Supabase Auth. Create email verification endpoints. Implement JWT guards for protected routes. Add input validation and error handling following DDD patterns from docs/project-plan.md. Method names should clearly indicate their purpose.",
            "status": "pending",
            "testStrategy": "Authentication endpoints work correctly with proper error handling, tested using AAA pattern from docs/testing-strategy.md, and production code contains no comments",
            "parentId": "undefined"
          },
          {
            "id": 3,
            "title": "Build role-based access control system",
            "description": "Implement RBAC guards and decorators for fine-grained authorization",
            "dependencies": [
              "8.2"
            ],
            "details": "Create role-based guard using JWT payload. Implement role decorator for controller methods. Build permission checking service. Create admin, user, and moderator role definitions. Add role assignment functionality. Implement route-level authorization controls following DDD domain services patterns from docs/project-plan.md. Use clear naming conventions for roles and permissions.",
            "status": "pending",
            "testStrategy": "RBAC system enforces permissions correctly with comprehensive test coverage using AAA pattern from docs/testing-strategy.md, and guard logic is self-documenting",
            "parentId": "undefined"
          }
        ],
        "updatedAt": "2025-10-02T10:36:58.765Z",
        "complexity": 5,
        "recommendedSubtasks": 3,
        "expansionPrompt": "Break down this task with a focus on implement puppies backend module."
      },
      {
        "id": "9",
        "title": "Build calendar and events backend module",
        "description": "Implement event scheduling and calendar management",
        "details": "Create events controller with CRUD operations. Implement recurring event logic. Build breed-specific health timeline generator. Create vaccination scheduling service. Implement Google Calendar integration service. All business logic must be expressed through clear method and class names without requiring explanatory comments.\n\n**MANDATORY DOCUMENTATION REFERENCES:**\n- Follow DDD architecture with Domain, Application, and Infrastructure layers as outlined in docs/project-plan.md Phase 1\n- Configure external API keys and integrations following docs/environment-variables.md security guidelines\n- Implement comprehensive testing using AAA pattern with in-memory providers per docs/testing-strategy.md",
        "testStrategy": "Events can be created, recurring events generate properly, calendar sync works, testing follows AAA pattern from docs/testing-strategy.md, and all code is self-documenting without comments",
        "priority": "medium",
        "dependencies": [
          "8"
        ],
        "status": "pending",
        "subtasks": [
          {
            "id": 1,
            "title": "Create events controller with CRUD operations",
            "description": "Build NestJS controller for event management with create, read, update, delete endpoints",
            "dependencies": [],
            "details": "Create EventsController with endpoints for POST /events (create), GET /events (list), GET /events/:id (get single), PUT /events/:id (update), DELETE /events/:id (delete). Implement proper validation using DTOs and Zod schemas from packages/shared. Add error handling and response formatting. Include pagination for list endpoint. Follow DDD Infrastructure layer patterns from docs/project-plan.md. Use descriptive endpoint and method names.",
            "status": "pending",
            "testStrategy": "CRUD operations work correctly with proper validation, tested using AAA pattern from docs/testing-strategy.md, and controller code contains no comments",
            "parentId": "undefined"
          },
          {
            "id": 2,
            "title": "Implement recurring event logic and scheduling service",
            "description": "Build service to handle recurring events and vaccination scheduling with breed-specific timelines",
            "dependencies": [
              "9.1"
            ],
            "details": "Create RecurringEventsService to generate event instances from recurring patterns (daily, weekly, monthly, yearly). Build VaccinationScheduleService with breed-specific health timeline templates. Implement logic to auto-generate vaccination events based on puppy breed and birthdate. Handle timezone considerations and daylight saving time. Follow DDD Domain Services patterns from docs/project-plan.md. Service names should clearly indicate their responsibility.",
            "status": "pending",
            "testStrategy": "Recurring events generate correctly, vaccination schedules follow breed requirements, tested with AAA pattern from docs/testing-strategy.md, and service logic is self-explanatory",
            "parentId": "undefined"
          },
          {
            "id": 3,
            "title": "Build Google Calendar integration service",
            "description": "Implement two-way sync with Google Calendar API for event management",
            "dependencies": [
              "9.2"
            ],
            "details": "Create GoogleCalendarService with OAuth2 authentication. Implement sync methods to push events to Google Calendar and pull external events. Build webhook handlers for real-time calendar updates. Add conflict resolution for overlapping events. Include proper error handling for API rate limits and network failures. Configure API keys following docs/environment-variables.md security guidelines. Method names should describe integration actions clearly.",
            "status": "pending",
            "testStrategy": "Google Calendar integration syncs correctly with proper error handling, tested using AAA pattern from docs/testing-strategy.md, and integration code is comment-free",
            "parentId": "undefined"
          }
        ],
        "complexity": 5,
        "recommendedSubtasks": 3,
        "expansionPrompt": "Break down this task with a focus on build calendar and events backend module."
      },
      {
        "id": "10",
        "title": "Implement feeding backend module",
        "description": "Create feeding schedules and tracking system",
        "details": "Build feeding schedules controller. Create feeding logs tracking service. Implement weight-based portion calculation algorithms. Build food types and assignments management. Create feeding history aggregation endpoints. All calculation logic must be expressed through clear algorithm names and structure.\n\n**MANDATORY DOCUMENTATION REFERENCES:**\n- Implement DDD architecture with proper Domain Layer business logic as specified in docs/project-plan.md Phase 1\n- Follow environment configuration guidelines from docs/environment-variables.md for any external service integrations\n- Use AAA testing pattern with in-memory providers for business logic testing per docs/testing-strategy.md",
        "testStrategy": "Feeding schedules create correctly, portion calculations are accurate, comprehensive testing follows AAA pattern from docs/testing-strategy.md, and business logic is self-documenting",
        "priority": "medium",
        "dependencies": [
          "8"
        ],
        "status": "pending",
        "subtasks": [
          {
            "id": 1,
            "title": "Build feeding schedules controller and management system",
            "description": "Create REST API endpoints for feeding schedule CRUD operations and food type management",
            "dependencies": [],
            "details": "Implement feeding schedules controller with endpoints for creating, reading, updating, and deleting feeding schedules. Build food types management system with CRUD operations for different food items. Create food assignments linking pets to specific food types. Include validation for schedule conflicts and proper error handling. Follow DDD Infrastructure layer patterns from docs/project-plan.md. Controller methods should have descriptive names indicating their operations.",
            "status": "pending",
            "testStrategy": "Feeding schedule endpoints work correctly with proper validation, tested using AAA pattern from docs/testing-strategy.md, and controller logic contains no comments",
            "parentId": "undefined"
          },
          {
            "id": 2,
            "title": "Implement feeding logs tracking service and portion calculations",
            "description": "Create feeding logs tracking system with weight-based portion calculation algorithms",
            "dependencies": [
              "10.1"
            ],
            "details": "Build feeding logs tracking service to record actual feeding events. Implement weight-based portion calculation algorithms that adjust serving sizes based on pet weight, age, and activity level. Create validation for feeding log entries and automatic portion recommendations. Include business logic for calculating optimal feeding amounts. Follow DDD Domain Services patterns from docs/project-plan.md. Algorithm method names should clearly describe calculation purpose.",
            "status": "pending",
            "testStrategy": "Portion calculations are accurate, feeding logs track correctly, tested with AAA pattern from docs/testing-strategy.md, and calculation logic is self-explanatory",
            "parentId": "undefined"
          },
          {
            "id": 3,
            "title": "Create feeding history aggregation endpoints",
            "description": "Build API endpoints for feeding history reports and analytics",
            "dependencies": [
              "10.2"
            ],
            "details": "Implement feeding history aggregation endpoints that provide comprehensive feeding analytics. Create endpoints for daily, weekly, and monthly feeding summaries. Build feeding pattern analysis and trend reporting. Include feeding compliance tracking and missed feeding alerts. Provide data export capabilities for feeding history. Follow DDD Application Layer patterns from docs/project-plan.md. Endpoint names should clearly indicate the type of aggregation provided.",
            "status": "pending",
            "testStrategy": "Feeding history aggregation provides accurate analytics, tested using AAA pattern from docs/testing-strategy.md, and aggregation logic is comment-free",
            "parentId": "undefined"
          }
        ],
        "complexity": 5,
        "recommendedSubtasks": 3,
        "expansionPrompt": "Break down this task with a focus on implement feeding backend module."
      },
      {
        "id": "11",
        "title": "Build training backend module",
        "description": "Implement training exercises and progress tracking",
        "details": "Create training exercises database service. Implement training progress tracking. Build training session management endpoints. Create behavioral milestones tracking. Implement training recommendation algorithms. All training logic must be self-documenting through clear naming conventions.\n\n**MANDATORY DOCUMENTATION REFERENCES:**\n- Follow DDD architecture patterns with proper domain modeling as outlined in docs/project-plan.md Phase 1\n- Configure any external service integrations following docs/environment-variables.md security guidelines\n- Implement comprehensive testing using AAA pattern with in-memory providers per docs/testing-strategy.md",
        "testStrategy": "Training sessions track correctly, recommendations generate appropriately, testing follows AAA pattern from docs/testing-strategy.md, and all training logic is comment-free",
        "priority": "medium",
        "dependencies": [
          "8"
        ],
        "status": "pending",
        "subtasks": [
          {
            "id": 1,
            "title": "Create training exercises database service",
            "description": "Build database models and service layer for managing training exercises",
            "dependencies": [],
            "details": "Create training exercise entity with fields for name, description, difficulty level, duration, and category. Implement CRUD operations for exercises. Create exercise categories and tags system. Build database migrations and seeders with common training exercises. Follow DDD Domain Layer patterns from docs/project-plan.md. Entity and service names should clearly indicate their training-related purpose.",
            "status": "pending",
            "testStrategy": "Training exercises CRUD operations work correctly, tested using AAA pattern from docs/testing-strategy.md, and service code contains no comments",
            "parentId": "undefined"
          },
          {
            "id": 2,
            "title": "Implement training progress tracking system",
            "description": "Build progress tracking service and behavioral milestones management",
            "dependencies": [
              "11.1"
            ],
            "details": "Create training session entity to track completed exercises. Implement progress calculation algorithms based on completion rates and improvement metrics. Build behavioral milestones tracking with configurable goals. Create progress aggregation endpoints for analytics. Follow DDD Domain Services patterns from docs/project-plan.md. Progress calculation methods should have descriptive names indicating metric types.",
            "status": "pending",
            "testStrategy": "Progress tracking calculates correctly, milestones update properly, tested with AAA pattern from docs/testing-strategy.md, and tracking logic is self-documenting",
            "parentId": "undefined"
          },
          {
            "id": 3,
            "title": "Build training session management and recommendation endpoints",
            "description": "Create API endpoints for session management and implement training recommendation algorithms",
            "dependencies": [
              "11.1",
              "11.2"
            ],
            "details": "Build REST endpoints for creating, updating, and managing training sessions. Implement recommendation algorithms based on puppy age, breed, and progress history. Create session scheduling and reminder system. Build endpoints for retrieving personalized training plans. Follow DDD Application Layer patterns from docs/project-plan.md. Recommendation algorithm names should clearly describe their recommendation criteria.",
            "status": "pending",
            "testStrategy": "Training recommendations are relevant, session management works correctly, tested using AAA pattern from docs/testing-strategy.md, and algorithm logic contains no comments",
            "parentId": "undefined"
          }
        ],
        "complexity": 5,
        "recommendedSubtasks": 3,
        "expansionPrompt": "Break down this task with a focus on build training backend module."
      },
      {
        "id": "12",
        "title": "Implement notification backend system",
        "description": "Create comprehensive notification system with multiple channels",
        "details": "Create Supabase Edge Functions for notifications. Build notification scheduling service. Implement web push notification handlers. Create email notification service integration. Build notification preferences management. All notification logic must be self-explanatory through clear service and method names.\n\n**MANDATORY DOCUMENTATION REFERENCES:**\n- Configure Supabase Edge Functions and service keys following docs/environment-variables.md security guidelines\n- Implement DDD architecture with proper domain events as outlined in docs/project-plan.md Phase 1\n- Use AAA testing pattern with proper mocking for external services per docs/testing-strategy.md",
        "testStrategy": "Notifications send correctly via all channels, preferences are respected, comprehensive testing follows AAA pattern from docs/testing-strategy.md, and notification logic is comment-free",
        "priority": "medium",
        "dependencies": [
          "8",
          "9",
          "10"
        ],
        "status": "pending",
        "subtasks": [
          {
            "id": 1,
            "title": "Create Supabase Edge Functions for notifications",
            "description": "Set up Edge Functions to handle notification processing and delivery",
            "dependencies": [],
            "details": "Create Edge Functions for notification processing, webhook handling, and delivery coordination. Set up proper authentication and error handling. Configure service role keys following docs/environment-variables.md security guidelines. Follow DDD Infrastructure layer patterns from docs/project-plan.md. Function names should clearly indicate their notification processing purpose.",
            "status": "pending",
            "testStrategy": "Edge Functions process notifications correctly with proper error handling, tested using AAA pattern from docs/testing-strategy.md, and function logic contains no comments",
            "parentId": "undefined"
          },
          {
            "id": 2,
            "title": "Implement notification scheduling service",
            "description": "Build service to schedule and queue notifications for delivery",
            "dependencies": [
              "12.1"
            ],
            "details": "Create scheduling logic for delayed notifications, recurring reminders, and batch processing. Implement queue management and priority handling. Follow DDD Domain Services patterns from docs/project-plan.md for business logic. Scheduling method names should clearly describe timing and priority logic.",
            "status": "pending",
            "testStrategy": "Notification scheduling works correctly with proper queue management, tested with AAA pattern from docs/testing-strategy.md, and scheduling logic is self-documenting",
            "parentId": "undefined"
          },
          {
            "id": 3,
            "title": "Set up web push notification handlers",
            "description": "Implement web push notification infrastructure and handlers",
            "dependencies": [
              "12.1"
            ],
            "details": "Configure VAPID keys, implement push notification subscription management, and create handlers for different notification types. Configure keys following docs/environment-variables.md security guidelines. Handler method names should indicate the type of push notification being processed.",
            "status": "pending",
            "testStrategy": "Web push notifications deliver correctly with proper subscription management, tested using AAA pattern from docs/testing-strategy.md, and handler logic contains no comments",
            "parentId": "undefined"
          },
          {
            "id": 4,
            "title": "Integrate email notification service",
            "description": "Set up email delivery service and templates",
            "dependencies": [
              "12.1"
            ],
            "details": "Integrate with email service provider, create email templates for different notification types, and implement delivery tracking. Configure API keys following docs/environment-variables.md security guidelines. Template and delivery method names should clearly indicate email purpose and delivery mechanism.",
            "status": "pending",
            "testStrategy": "Email notifications send correctly with proper template rendering, tested with AAA pattern from docs/testing-strategy.md, and email service code is comment-free",
            "parentId": "undefined"
          },
          {
            "id": 5,
            "title": "Build notification preferences management",
            "description": "Create system for managing user notification preferences",
            "dependencies": [
              "12.3",
              "12.4"
            ],
            "details": "Implement preference storage, user interface integration, and respect for opt-out settings across all notification channels. Follow DDD Domain modeling patterns from docs/project-plan.md. Preference management methods should clearly indicate the type of preference being handled.",
            "status": "pending",
            "testStrategy": "Notification preferences are respected across all channels, tested using AAA pattern from docs/testing-strategy.md, and preference logic is self-explanatory",
            "parentId": "undefined"
          },
          {
            "id": 6,
            "title": "Create notification delivery tracking and retry logic",
            "description": "Implement tracking and retry mechanisms for failed notifications",
            "dependencies": [
              "12.2",
              "12.3",
              "12.4"
            ],
            "details": "Build delivery status tracking, implement exponential backoff retry logic, and create monitoring for notification success rates. Follow DDD Domain Services patterns from docs/project-plan.md. Retry and tracking method names should clearly describe their monitoring and retry strategies.",
            "status": "pending",
            "testStrategy": "Delivery tracking and retry logic work correctly with proper monitoring, tested with AAA pattern from docs/testing-strategy.md, and tracking logic contains no comments",
            "parentId": "undefined"
          }
        ],
        "complexity": 7,
        "recommendedSubtasks": 6,
        "expansionPrompt": "Build comprehensive notification system: 1) Create Supabase Edge Functions for notifications, 2) Implement notification scheduling service, 3) Set up web push notification handlers, 4) Integrate email notification service, 5) Build notification preferences management, 6) Create notification delivery tracking and retry logic."
      },
      {
        "id": "13",
        "title": "Build family sharing backend module",
        "description": "Implement multi-user family sharing functionality",
        "details": "Create family groups management service. Implement invitation system with email tokens. Build RBAC for family member permissions. Implement real-time updates with Supabase subscriptions. Create activity logging and audit trail. All family sharing logic must be expressed through descriptive service and method names.\n\n**MANDATORY DOCUMENTATION REFERENCES:**\n- Follow DDD architecture patterns with proper domain modeling as outlined in docs/project-plan.md Phase 1\n- Configure email service integrations following docs/environment-variables.md security guidelines\n- Implement comprehensive testing using AAA pattern with in-memory providers per docs/testing-strategy.md",
        "testStrategy": "Family invitations work, permissions enforce correctly, real-time updates function, testing follows AAA pattern from docs/testing-strategy.md, and sharing logic is comment-free",
        "priority": "medium",
        "dependencies": [
          "8"
        ],
        "status": "pending",
        "subtasks": [
          {
            "id": 1,
            "title": "Create family groups management service",
            "description": "Implement core family group CRUD operations and database schema",
            "dependencies": [],
            "details": "Create family groups database table with fields for group name, admin user, creation date, and settings. Implement NestJS service with methods for creating, reading, updating, and deleting family groups. Add validation for group creation limits and naming constraints. Create DTOs for family group operations. Follow DDD Domain Layer patterns from docs/project-plan.md. Service method names should clearly indicate family group operations.",
            "status": "pending",
            "testStrategy": "Family group operations work correctly with proper validation, tested using AAA pattern from docs/testing-strategy.md, and service code contains no comments",
            "parentId": "undefined"
          },
          {
            "id": 2,
            "title": "Build invitation system with email tokens",
            "description": "Implement secure invitation flow with email verification and token management",
            "dependencies": [
              "13.1"
            ],
            "details": "Create invitation tokens table with expiration dates and security tokens. Implement email service integration for sending family invitations. Build invitation acceptance endpoint with token validation. Add invitation status tracking (pending, accepted, expired, revoked). Create rate limiting for invitation sending. Follow email configuration from docs/environment-variables.md. Token and validation method names should clearly describe security operations.",
            "status": "pending",
            "testStrategy": "Invitation system works securely with proper token validation, tested with AAA pattern from docs/testing-strategy.md, and invitation logic is self-documenting",
            "parentId": "undefined"
          },
          {
            "id": 3,
            "title": "Implement RBAC and real-time features",
            "description": "Build role-based access control system and real-time updates with activity logging",
            "dependencies": [
              "13.2"
            ],
            "details": "Create family member roles system (admin, member, viewer) with permission matrices. Implement middleware for role-based endpoint protection. Set up Supabase real-time subscriptions for family data changes. Create activity logging service for audit trail of family actions. Build notification system for family updates. Follow DDD Domain Services patterns from docs/project-plan.md. Role and permission method names should clearly indicate access control operations.",
            "status": "pending",
            "testStrategy": "RBAC enforces permissions correctly, real-time updates work properly, tested using AAA pattern from docs/testing-strategy.md, and access control logic contains no comments",
            "parentId": "undefined"
          }
        ],
        "complexity": 5,
        "recommendedSubtasks": 3,
        "expansionPrompt": "Break down this task with a focus on build family sharing backend module."
      },
      {
        "id": "14",
        "title": "Implement AI service integration backend",
        "description": "Create AI-powered care plan and recommendation system",
        "details": "Create AI service abstraction layer. Implement OpenAI and Anthropic provider integrations. Build care plan generation service. Create feeding plan optimization algorithms. Implement training progression suggestion engine. All AI integration logic must be self-documenting through clear service abstractions and method names.\n\n**MANDATORY DOCUMENTATION REFERENCES:**\n- Configure AI provider API keys following docs/environment-variables.md security guidelines\n- Implement DDD architecture with proper domain services as outlined in docs/project-plan.md Phase 1\n- Use AAA testing pattern with proper mocking for external AI services per docs/testing-strategy.md",
        "testStrategy": "AI services generate meaningful recommendations and care plans, comprehensive testing follows AAA pattern from docs/testing-strategy.md, and AI integration code is comment-free",
        "priority": "low",
        "dependencies": [
          "8",
          "9",
          "10",
          "11"
        ],
        "status": "pending",
        "subtasks": [
          {
            "id": 1,
            "title": "Design AI service abstraction layer",
            "description": "Create abstract interfaces and base classes for AI service providers",
            "dependencies": [],
            "details": "Design provider-agnostic interfaces for AI services. Create base abstract classes for chat completion, embeddings, and structured output. Define error handling patterns and response standardization. Implement configuration management for different AI providers. Follow DDD Domain Services patterns from docs/project-plan.md. Interface and class names should clearly indicate AI service capabilities.",
            "status": "pending",
            "testStrategy": "AI service abstraction provides proper interface isolation, tested using AAA pattern from docs/testing-strategy.md, and abstraction code contains no comments",
            "parentId": "undefined"
          },
          {
            "id": 2,
            "title": "Implement OpenAI provider integration",
            "description": "Build OpenAI-specific implementation of AI service interfaces",
            "dependencies": [
              "14.1"
            ],
            "details": "Implement OpenAI SDK integration. Build chat completion service with GPT models. Create structured output handlers using function calling. Implement error handling and rate limiting. Add configuration for API keys and model selection following docs/environment-variables.md security guidelines. Provider method names should clearly indicate OpenAI-specific operations.",
            "status": "pending",
            "testStrategy": "OpenAI integration works correctly with proper error handling, tested with AAA pattern from docs/testing-strategy.md, and integration code is self-documenting",
            "parentId": "undefined"
          },
          {
            "id": 3,
            "title": "Implement Anthropic provider integration",
            "description": "Build Anthropic Claude-specific implementation of AI service interfaces",
            "dependencies": [
              "14.1"
            ],
            "details": "Implement Anthropic SDK integration. Build Claude chat completion service. Create structured output handlers using tool use. Implement error handling and rate limiting. Add configuration for API keys and model selection following docs/environment-variables.md security guidelines. Provider method names should clearly indicate Anthropic-specific operations.",
            "status": "pending",
            "testStrategy": "Anthropic integration works correctly with proper error handling, tested using AAA pattern from docs/testing-strategy.md, and integration logic contains no comments",
            "parentId": "undefined"
          },
          {
            "id": 4,
            "title": "Build care plan generation algorithms",
            "description": "Create AI-powered pet care plan generation service",
            "dependencies": [
              "14.2",
              "14.3"
            ],
            "details": "Design prompt templates for care plan generation based on pet profiles. Implement context processing to include pet health, age, breed, and medical history. Build structured output parsing for care recommendations. Create validation logic for generated plans. Follow DDD Domain Services patterns from docs/project-plan.md. Care plan method names should clearly indicate the type of care planning being performed.",
            "status": "pending",
            "testStrategy": "Care plan generation produces relevant recommendations, tested with AAA pattern from docs/testing-strategy.md, and generation logic is comment-free",
            "parentId": "undefined"
          },
          {
            "id": 5,
            "title": "Create feeding and training recommendation engines",
            "description": "Implement AI services for feeding schedules and training progression",
            "dependencies": [
              "14.2",
              "14.3"
            ],
            "details": "Build feeding plan optimization using pet nutritional needs and activity levels. Create training progression algorithms based on pet behavior and learning patterns. Implement context-aware recommendations using historical data. Build feedback loops for recommendation improvement. Follow DDD Domain Services patterns from docs/project-plan.md. Recommendation method names should clearly describe the optimization criteria and target domain.",
            "status": "pending",
            "testStrategy": "Feeding and training recommendations are accurate and contextual, tested using AAA pattern from docs/testing-strategy.md, and recommendation logic is self-explanatory",
            "parentId": "undefined"
          }
        ],
        "complexity": 6,
        "recommendedSubtasks": 5,
        "expansionPrompt": "Create AI service backend: 1) Design AI service abstraction layer, 2) Implement OpenAI provider integration, 3) Implement Anthropic provider integration, 4) Build care plan generation algorithms, 5) Create feeding and training recommendation engines with context processing."
      },
      {
        "id": "15",
        "title": "Build analytics backend module",
        "description": "Implement data analytics and reporting system",
        "details": "Create weight tracking analytics service. Implement growth prediction algorithms. Build breed comparison service. Create trend analysis and alerting system. Implement data aggregation for dashboards. All analytics algorithms must be self-documenting through clear naming and structure.\n\n**MANDATORY DOCUMENTATION REFERENCES:**\n- Implement DDD architecture with proper domain analytics services as outlined in docs/project-plan.md Phase 1\n- Follow environment configuration for any external analytics services from docs/environment-variables.md\n- Use AAA testing pattern with in-memory data providers per docs/testing-strategy.md",
        "testStrategy": "Analytics generate accurate insights and predictions, comprehensive testing follows AAA pattern from docs/testing-strategy.md, and analytics logic is comment-free",
        "priority": "medium",
        "dependencies": [
          "8",
          "10"
        ],
        "status": "pending",
        "subtasks": [
          {
            "id": 1,
            "title": "Create weight tracking analytics service",
            "description": "Implement service for analyzing puppy weight data and generating growth insights",
            "dependencies": [],
            "details": "Build WeightAnalyticsService with methods for weight trend analysis, growth rate calculations, and weight milestone tracking. Include statistical functions for average weight by age/breed, growth velocity analysis, and weight percentile calculations. Integrate with puppy weight records from database. Follow DDD Domain Services patterns from docs/project-plan.md. Analytics method names should clearly indicate the type of weight analysis being performed.",
            "status": "pending",
            "testStrategy": "Weight analytics produce accurate calculations and insights, tested using AAA pattern from docs/testing-strategy.md, and analytics code contains no comments",
            "parentId": "undefined"
          },
          {
            "id": 2,
            "title": "Implement growth prediction algorithms",
            "description": "Develop algorithms to predict puppy growth patterns and adult size estimation",
            "dependencies": [
              "15.1"
            ],
            "details": "Create GrowthPredictionService with machine learning or statistical models for predicting adult weight based on current growth patterns. Implement breed-specific growth curves and prediction accuracy metrics. Include confidence intervals and prediction validation against historical data. Follow DDD Domain Services patterns from docs/project-plan.md. Prediction method names should clearly describe the growth modeling approach and target metrics.",
            "status": "pending",
            "testStrategy": "Growth predictions are accurate within acceptable confidence intervals, tested with AAA pattern from docs/testing-strategy.md, and prediction algorithms are self-documenting",
            "parentId": "undefined"
          },
          {
            "id": 3,
            "title": "Build analytics aggregation and reporting endpoints",
            "description": "Create API endpoints for analytics data aggregation and dashboard reporting",
            "dependencies": [
              "15.1",
              "15.2"
            ],
            "details": "Implement AnalyticsController with endpoints for breed comparison data, trend analysis results, and dashboard metrics. Create data aggregation services for generating summary statistics, alerts for unusual patterns, and export functionality for reports. Include caching for performance optimization. Follow DDD Application Layer patterns from docs/project-plan.md. Endpoint and aggregation method names should clearly indicate the type of analytics data being provided.",
            "status": "pending",
            "testStrategy": "Analytics endpoints provide accurate aggregated data with proper performance, tested using AAA pattern from docs/testing-strategy.md, and aggregation logic contains no comments",
            "parentId": "undefined"
          }
        ],
        "complexity": 5,
        "recommendedSubtasks": 3,
        "expansionPrompt": "Break down this task with a focus on build analytics backend module."
      },
      {
        "id": "16",
        "title": "Build shared utility functions",
        "description": "Create reusable utility functions for monorepo",
        "details": "Create date/time utilities. Build formatting helpers. Implement validation utilities. Create calculation helpers for weight, portions, etc. Build error handling utilities. Add logging utilities. All utility functions must be self-explanatory through descriptive names and clear parameter definitions.\n\n**MANDATORY DOCUMENTATION REFERENCES:**\n- Follow shared package structure and configuration guidelines from docs/project-plan.md Phase 2\n- Ensure utilities work with environment configuration from docs/environment-variables.md\n- Implement comprehensive testing using AAA pattern per docs/testing-strategy.md",
        "testStrategy": "All utilities work correctly and are properly exported, comprehensive testing follows AAA pattern from docs/testing-strategy.md, and utility functions are comment-free",
        "priority": "medium",
        "dependencies": [
          "7"
        ],
        "status": "pending",
        "subtasks": [
          {
            "id": 1,
            "title": "Create date/time and formatting utilities",
            "description": "Implement date/time manipulation functions and text/number formatting helpers",
            "dependencies": [],
            "details": "Create date formatting functions (formatDate, formatTime, calculateAge, etc.). Build text formatters (capitalize, truncate, slugify). Implement number formatters (currency, percentage, decimal places). Add relative time functions (timeAgo, duration). Follow KISS principles from docs/project-plan.md. Function names should clearly describe their formatting purpose and expected output format.",
            "status": "pending",
            "testStrategy": "Date/time and formatting utilities work correctly across different locales, tested using AAA pattern from docs/testing-strategy.md, and utility code contains no comments",
            "parentId": "undefined"
          },
          {
            "id": 2,
            "title": "Build validation and calculation utilities",
            "description": "Create validation functions and pet-specific calculation helpers",
            "dependencies": [
              "16.1"
            ],
            "details": "Implement validation utilities (email, phone, required fields, etc.). Create weight conversion functions (pounds to kg, etc.). Build portion calculation helpers for pet feeding. Add age calculation utilities for pets. Create breed-specific validation functions. Follow DRY principles from docs/project-plan.md. Validation and calculation function names should clearly indicate their validation criteria or calculation purpose.",
            "status": "pending",
            "testStrategy": "Validation and calculation utilities handle edge cases correctly, tested with AAA pattern from docs/testing-strategy.md, and utility logic is self-documenting",
            "parentId": "undefined"
          },
          {
            "id": 3,
            "title": "Implement error handling and logging utilities",
            "description": "Create centralized error handling and logging infrastructure",
            "dependencies": [
              "16.1",
              "16.2"
            ],
            "details": "Build custom error classes for different error types. Create error formatting and reporting utilities. Implement structured logging functions with different log levels. Add error boundary helpers for React components. Create API error response formatters. Follow error handling patterns from docs/project-plan.md. Error and logging function names should clearly indicate their error handling scope and logging level.",
            "status": "pending",
            "testStrategy": "Error handling and logging utilities provide consistent behavior, tested using AAA pattern from docs/testing-strategy.md, and error handling code contains no comments",
            "parentId": "undefined"
          }
        ],
        "complexity": 5,
        "recommendedSubtasks": 3,
        "expansionPrompt": "Break down this task with a focus on build shared utility functions."
      },
      {
        "id": "17",
        "title": "Setup frontend architecture foundation",
        "description": "Configure React Router, React Query, and form handling",
        "details": "Configure React Router for navigation. Set up React Query for API integration with proper error handling. Configure react-hook-form with Zod validation. Implement authentication context and hooks. Set up error boundary and global error handling. All frontend architecture must be self-documenting through clear component and hook names.\n\n**MANDATORY DOCUMENTATION REFERENCES:**\n- Follow frontend architecture patterns from docs/project-plan.md Phase 4 requirements\n- Configure environment variables for frontend following docs/environment-variables.md VITE_ prefix guidelines\n- Implement comprehensive testing using AAA pattern per docs/testing-strategy.md",
        "testStrategy": "Routing works, API calls succeed, forms validate correctly, testing follows AAA pattern from docs/testing-strategy.md, and frontend code is comment-free",
        "priority": "high",
        "dependencies": [
          "2",
          "4"
        ],
        "status": "pending",
        "subtasks": [
          {
            "id": 1,
            "title": "Configure React Router and navigation structure",
            "description": "Set up React Router with route definitions and navigation components",
            "dependencies": [],
            "details": "Install and configure React Router v6. Create route definitions for main app sections. Implement navigation components (header, sidebar). Set up protected routes for authenticated areas. Configure route guards and redirects. Follow frontend architecture from docs/project-plan.md and use environment configuration from docs/environment-variables.md. Route and component names should clearly indicate their navigation purpose.",
            "status": "pending",
            "testStrategy": "React Router navigation works correctly with proper route protection, tested using AAA pattern from docs/testing-strategy.md, and routing code contains no comments",
            "parentId": "undefined"
          },
          {
            "id": 2,
            "title": "Set up React Query for API state management",
            "description": "Configure React Query with proper error handling and caching",
            "dependencies": [
              "17.1"
            ],
            "details": "Install and configure React Query client. Set up query client with default options for caching and retries. Implement global error handling for API calls. Create custom hooks for common API patterns. Configure dev tools for debugging. Use API base URL from docs/environment-variables.md VITE_ configuration. Hook and query key names should clearly describe their API operations.",
            "status": "pending",
            "testStrategy": "React Query handles API state correctly with proper error handling, tested with AAA pattern from docs/testing-strategy.md, and query logic is self-documenting",
            "parentId": "undefined"
          },
          {
            "id": 3,
            "title": "Implement form handling and authentication context",
            "description": "Set up react-hook-form with Zod validation and authentication system",
            "dependencies": [
              "17.2"
            ],
            "details": "Configure react-hook-form with Zod schema validation from packages/shared. Create reusable form components and validation patterns. Implement authentication context with login/logout functionality. Create protected route wrapper components. Set up error boundaries for global error handling. Follow authentication patterns from docs/project-plan.md. Form and authentication component names should clearly indicate their purpose and scope.",
            "status": "pending",
            "testStrategy": "Form validation and authentication work correctly with proper error handling, tested using AAA pattern from docs/testing-strategy.md, and form handling code contains no comments",
            "parentId": "undefined"
          }
        ],
        "complexity": 5,
        "recommendedSubtasks": 3,
        "expansionPrompt": "Break down this task with a focus on setup frontend architecture foundation."
      },
      {
        "id": "18",
        "title": "Build comprehensive UI components package",
        "description": "Create design system with all necessary components",
        "details": "Build Button, Input, Select components with variants. Create Card, Modal, Toast components. Implement Form components with validation display. Build responsive layout components. Create data display components like Tables and Charts. All UI components must be self-documenting through clear prop names and component structure.\n\n**MANDATORY DOCUMENTATION REFERENCES:**\n- Follow UI package structure and build configuration from docs/project-plan.md shared packages section\n- Ensure components work with environment configuration for any external dependencies from docs/environment-variables.md\n- Implement comprehensive component testing using AAA pattern per docs/testing-strategy.md",
        "testStrategy": "All components render correctly and are responsive, comprehensive testing follows AAA pattern from docs/testing-strategy.md, and component code is comment-free",
        "priority": "high",
        "dependencies": [
          "4"
        ],
        "status": "pending",
        "subtasks": [
          {
            "id": 1,
            "title": "Move shadcn/ui components to packages/ui structure",
            "description": "Relocate existing shadcn/ui components from current location to packages/ui/ directory",
            "dependencies": [],
            "details": "Create packages/ui/ directory structure following docs/project-plan.md monorepo architecture. Move all existing shadcn/ui components (Button, Input, Select, Card, Modal, Toast, Form components, layout components, Tables, Charts) from their current location to packages/ui/src/components/. Preserve component structure and existing implementations. Ensure component names remain descriptive and self-explanatory.",
            "status": "pending",
            "testStrategy": "All components move successfully and maintain functionality, tested using AAA pattern from docs/testing-strategy.md, and component code contains no comments",
            "parentId": "undefined"
          },
          {
            "id": 2,
            "title": "Configure UI package build process and exports",
            "description": "Set up build configuration and package exports for the UI components package",
            "dependencies": [
              "18.1"
            ],
            "details": "Create package.json for packages/ui with proper exports configuration following docs/project-plan.md package configuration guidelines. Set up TypeScript build configuration (tsconfig.json). Configure build scripts using Bun. Create index.ts files to export all components. Set up proper module resolution and build output structure. Configuration should be self-explanatory through clear structure and naming.",
            "status": "pending",
            "testStrategy": "UI package builds correctly and exports work properly, tested with AAA pattern from docs/testing-strategy.md, and build configuration contains no comments",
            "parentId": "undefined"
          },
          {
            "id": 3,
            "title": "Update import paths across application to use UI package",
            "description": "Refactor all component imports throughout the application to use the new package structure",
            "dependencies": [
              "18.2"
            ],
            "details": "Search and replace all import statements that reference the old shadcn/ui component paths. Update imports to use the new packages/ui package structure (e.g., import { Button } from '@wag-wise-mentor/ui'). Verify all components still work correctly after the import path updates. Test that the application builds and runs successfully. Import statements should clearly indicate component source packages.",
            "status": "pending",
            "testStrategy": "All import paths update correctly and application builds successfully, tested using AAA pattern from docs/testing-strategy.md, and refactored imports contain no comments",
            "parentId": "undefined"
          }
        ],
        "complexity": 2,
        "recommendedSubtasks": 3,
        "expansionPrompt": "Reorganize existing UI components: 1) Move current shadcn/ui components to packages/ui/, 2) Configure build process and exports for UI package, 3) Update import paths across the application to use the new package structure."
      },
      {
        "id": "19",
        "title": "Implement puppy profile frontend",
        "description": "Create comprehensive puppy management interface",
        "details": "Create puppy registration wizard with step-by-step flow. Build breed selection with autocomplete. Implement photo upload component with crop/resize. Create puppy profile view/edit forms. Build weight tracking charts. Implement medical history forms. All UI components must be self-documenting through clear component and prop names.\n\n**MANDATORY DOCUMENTATION REFERENCES:**\n- Follow frontend component patterns from docs/project-plan.md Phase 4 frontend implementation guidelines\n- Use environment configuration for file uploads and API endpoints from docs/environment-variables.md\n- Implement comprehensive component testing using AAA pattern per docs/testing-strategy.md",
        "testStrategy": "Puppy registration completes successfully, profiles display correctly, testing follows AAA pattern from docs/testing-strategy.md, and component code is comment-free",
        "priority": "medium",
        "dependencies": [
          "17",
          "18"
        ],
        "status": "pending",
        "subtasks": [
          {
            "id": 1,
            "title": "Create puppy registration wizard component",
            "description": "Build multi-step registration form with navigation and validation",
            "dependencies": [],
            "details": "Create stepper component with steps for basic info, breed selection, photos, and medical history. Implement form state management across steps with validation at each stage. Add progress indicator and navigation between steps. Follow KISS principles from docs/project-plan.md. Component and step names should clearly indicate their registration purpose and flow position.",
            "status": "pending",
            "testStrategy": "Registration wizard handles multi-step flow correctly with proper validation, tested using AAA pattern from docs/testing-strategy.md, and wizard code contains no comments",
            "parentId": "undefined"
          },
          {
            "id": 2,
            "title": "Build breed selection with autocomplete",
            "description": "Implement searchable breed dropdown with validation",
            "dependencies": [],
            "details": "Create autocomplete component that searches through breed database. Add breed validation and suggestions. Implement fuzzy search for partial matches. Include breed characteristics display on selection. Follow DRY principles from docs/project-plan.md. Component method names should clearly describe search and validation operations.",
            "status": "pending",
            "testStrategy": "Breed selection works correctly with search and validation, tested with AAA pattern from docs/testing-strategy.md, and selection logic is self-documenting",
            "parentId": "undefined"
          },
          {
            "id": 3,
            "title": "Implement photo upload with crop/resize",
            "description": "Create photo upload component with image manipulation",
            "dependencies": [],
            "details": "Build file upload component with drag-and-drop. Implement image cropping and resizing functionality. Add preview capabilities and multiple photo support. Include image optimization before upload. Configure upload endpoints using docs/environment-variables.md. Upload component methods should clearly indicate their image processing operations.",
            "status": "pending",
            "testStrategy": "Photo upload handles file processing correctly with proper validation, tested using AAA pattern from docs/testing-strategy.md, and upload logic contains no comments",
            "parentId": "undefined"
          },
          {
            "id": 4,
            "title": "Create puppy profile view and edit forms",
            "description": "Build comprehensive profile display and editing interface",
            "dependencies": [
              "19.1",
              "19.2",
              "19.3"
            ],
            "details": "Create profile view component showing all puppy information. Build edit forms for updating puppy details. Implement form validation and error handling. Add save/cancel functionality with optimistic updates. Avoid nested conditionals following docs/project-plan.md principles. Form component names should clearly indicate their profile management purpose.",
            "status": "pending",
            "testStrategy": "Profile forms handle data correctly with proper validation and error states, tested with AAA pattern from docs/testing-strategy.md, and form logic is comment-free",
            "parentId": "undefined"
          },
          {
            "id": 5,
            "title": "Build weight tracking charts",
            "description": "Implement weight visualization using recharts library",
            "dependencies": [],
            "details": "Create weight tracking chart component using recharts. Implement data visualization for weight progression over time. Add interactive features like tooltips and zoom. Include growth curve comparisons and milestones. Follow data visualization patterns from docs/project-plan.md. Chart component methods should clearly describe their visualization and interaction capabilities.",
            "status": "pending",
            "testStrategy": "Weight charts display data accurately with proper interactivity, tested using AAA pattern from docs/testing-strategy.md, and chart code contains no comments",
            "parentId": "undefined"
          },
          {
            "id": 6,
            "title": "Implement medical history forms",
            "description": "Create medical record management interface with validation",
            "dependencies": [],
            "details": "Build medical history forms for vaccinations, treatments, and checkups. Implement date validation and required field checks. Add medical record display and editing capabilities. Include reminder notifications for upcoming medical needs. Follow form validation patterns from docs/project-plan.md. Medical form component names should clearly indicate their medical record management scope.",
            "status": "pending",
            "testStrategy": "Medical history forms validate correctly and manage data properly, tested with AAA pattern from docs/testing-strategy.md, and medical form logic is self-documenting",
            "parentId": "undefined"
          }
        ],
        "complexity": 6,
        "recommendedSubtasks": 6,
        "expansionPrompt": "Build puppy management interface: 1) Create puppy registration wizard with multi-step form, 2) Build breed selection with autocomplete and validation, 3) Implement photo upload with crop/resize functionality, 4) Create puppy profile view/edit forms, 5) Build weight tracking charts using recharts, 6) Implement medical history forms with validation."
      },
      {
        "id": "20",
        "title": "Build calendar and events frontend",
        "description": "Create event scheduling and calendar interface",
        "details": "Create calendar component using react-day-picker. Build event creation/editing modal forms. Implement recurring event UI with options. Create vaccination schedule interface. Build appointment management with reminders. All calendar components must be self-documenting through clear naming and structure.\n\n**MANDATORY DOCUMENTATION REFERENCES:**\n- Follow frontend architecture patterns from docs/project-plan.md Phase 4 requirements\n- Configure calendar integrations using environment variables from docs/environment-variables.md\n- Implement comprehensive testing using AAA pattern per docs/testing-strategy.md",
        "testStrategy": "Calendar displays events correctly, event creation works, recurring events show properly, testing follows AAA pattern from docs/testing-strategy.md, and calendar code is comment-free",
        "priority": "medium",
        "dependencies": [
          "17",
          "18"
        ],
        "status": "pending",
        "subtasks": [],
        "complexity": 7,
        "recommendedSubtasks": 6,
        "expansionPrompt": "Create calendar and events system: 1) Implement calendar component using react-day-picker, 2) Build event creation/editing modal forms, 3) Implement recurring event logic and UI, 4) Create vaccination schedule interface, 5) Build appointment management with reminders, 6) Integrate with backend event APIs and real-time updates."
      },
      {
        "id": "21",
        "title": "Implement feeding schedule frontend",
        "description": "Create feeding management and tracking interface",
        "details": "Create feeding schedule creation forms with time pickers. Build meal logging interface with quick actions. Implement portion tracking charts using recharts. Create feeding history visualization. Build feeding reminders UI. All feeding components must be self-explanatory through descriptive names and clear structure.\n\n**MANDATORY DOCUMENTATION REFERENCES:**\n- Follow frontend component patterns from docs/project-plan.md Phase 4 implementation guidelines\n- Use API endpoints configured in docs/environment-variables.md for feeding data\n- Implement comprehensive component testing using AAA pattern per docs/testing-strategy.md",
        "testStrategy": "Feeding schedules create correctly, logging works, charts display data, testing follows AAA pattern from docs/testing-strategy.md, and feeding code contains no comments",
        "priority": "medium",
        "dependencies": [
          "17",
          "18"
        ],
        "status": "pending",
        "subtasks": [],
        "complexity": 5,
        "recommendedSubtasks": 5,
        "expansionPrompt": "Build feeding management interface: 1) Create feeding schedule forms with time pickers, 2) Build meal logging interface with quick actions, 3) Implement portion tracking charts with recharts, 4) Create feeding history visualization and analytics, 5) Build feeding reminders and notification integration."
      },
      {
        "id": "22",
        "title": "Build training library frontend",
        "description": "Create training exercises and progress interface",
        "details": "Create training exercise library with search/filter. Build progress tracking interface with charts. Create training session scheduler. Implement milestone tracking UI. Build exercise video player components. All training components must be self-documenting through clear naming conventions.\n\n**MANDATORY DOCUMENTATION REFERENCES:**\n- Follow frontend architecture patterns from docs/project-plan.md Phase 4 requirements\n- Configure media handling using environment variables from docs/environment-variables.md\n- Implement comprehensive testing using AAA pattern per docs/testing-strategy.md",
        "testStrategy": "Training library loads, progress tracks correctly, videos play, testing follows AAA pattern from docs/testing-strategy.md, and training code is comment-free",
        "priority": "medium",
        "dependencies": [
          "17",
          "18"
        ],
        "status": "pending",
        "subtasks": [],
        "complexity": 6,
        "recommendedSubtasks": 6,
        "expansionPrompt": "Create training management system: 1) Build training exercise library with search/filter, 2) Implement progress tracking with charts and milestones, 3) Create training session scheduler, 4) Build milestone tracking UI with progress indicators, 5) Implement exercise video player components, 6) Create training recommendation interface."
      },
      {
        "id": "23",
        "title": "Implement dashboard and routines frontend",
        "description": "Create main dashboard with daily agenda and routines",
        "details": "Build main dashboard layout with responsive design. Create daily agenda view with timeline. Implement routine management UI. Build quick action cards for common tasks. Create progress widgets and summary stats. All dashboard components must be self-documenting through clear component names and structure.\n\n**MANDATORY DOCUMENTATION REFERENCES:**\n- Follow dashboard architecture patterns from docs/project-plan.md Phase 4 implementation guidelines\n- Use API configuration from docs/environment-variables.md for data fetching\n- Implement comprehensive testing using AAA pattern per docs/testing-strategy.md with focus on user interactions",
        "testStrategy": "Dashboard loads quickly, agenda displays correctly, routines function, testing follows AAA pattern from docs/testing-strategy.md, and dashboard code contains no comments",
        "priority": "high",
        "dependencies": [
          "19",
          "20",
          "21",
          "22"
        ],
        "status": "pending",
        "subtasks": [],
        "complexity": 5,
        "recommendedSubtasks": 3,
        "expansionPrompt": "Break down this task with a focus on implement dashboard and routines frontend."
      },
      {
        "id": "24",
        "title": "Build notification frontend system",
        "description": "Implement notification management and display",
        "details": "Implement notification permission request UI. Create notification preferences interface. Build in-app notification center. Implement notification toasts with actions. Create notification history view. All notification components must be self-explanatory through descriptive names.\n\n**MANDATORY DOCUMENTATION REFERENCES:**\n- Follow frontend notification patterns from docs/project-plan.md Phase 4 requirements\n- Configure push notification settings using docs/environment-variables.md guidelines\n- Implement comprehensive testing using AAA pattern per docs/testing-strategy.md",
        "testStrategy": "Notifications display correctly, preferences save, permission requests work, testing follows AAA pattern from docs/testing-strategy.md, and notification code is comment-free",
        "priority": "medium",
        "dependencies": [
          "17",
          "18"
        ],
        "status": "pending",
        "subtasks": [],
        "complexity": 5,
        "recommendedSubtasks": 3,
        "expansionPrompt": "Break down this task with a focus on build notification frontend system."
      },
      {
        "id": "25",
        "title": "Implement family sharing frontend",
        "description": "Create family member management interface",
        "details": "Build family invitation UI with email forms. Create family member management interface. Implement role-based UI controls and permissions. Build activity feed component. Create family communication interface. All family sharing components must be self-documenting through clear naming.\n\n**MANDATORY DOCUMENTATION REFERENCES:**\n- Follow frontend architecture patterns from docs/project-plan.md Phase 4 requirements\n- Use authentication and API configuration from docs/environment-variables.md\n- Implement comprehensive testing using AAA pattern per docs/testing-strategy.md",
        "testStrategy": "Family invitations send, member management works, activity feed updates, testing follows AAA pattern from docs/testing-strategy.md, and family sharing code contains no comments",
        "priority": "medium",
        "dependencies": [
          "17",
          "18"
        ],
        "status": "pending",
        "subtasks": [],
        "complexity": 5,
        "recommendedSubtasks": 3,
        "expansionPrompt": "Break down this task with a focus on implement family sharing frontend."
      },
      {
        "id": "26",
        "title": "Build AI care plans frontend",
        "description": "Create AI-powered care recommendations interface",
        "details": "Create care plan display components with sections. Implement AI recommendation UI with accept/reject. Build care plan customization interface. Create feedback collection forms for AI improvements. All AI interface components must be self-explanatory through clear naming.\n\n**MANDATORY DOCUMENTATION REFERENCES:**\n- Follow frontend architecture patterns from docs/project-plan.md Phase 4 requirements\n- Configure AI service endpoints using docs/environment-variables.md for API access\n- Implement comprehensive testing using AAA pattern per docs/testing-strategy.md",
        "testStrategy": "Care plans display correctly, recommendations can be accepted, feedback submits, testing follows AAA pattern from docs/testing-strategy.md, and AI interface code is comment-free",
        "priority": "low",
        "dependencies": [
          "17",
          "18"
        ],
        "status": "pending",
        "subtasks": [],
        "complexity": 4,
        "recommendedSubtasks": 4,
        "expansionPrompt": "Create AI care plan interface: 1) Build care plan display components with sections and organization, 2) Implement AI recommendation UI with accept/reject actions, 3) Build care plan customization interface, 4) Create feedback collection forms for AI improvement."
      },
      {
        "id": "27",
        "title": "Implement analytics and reports frontend",
        "description": "Create data visualization and reporting interface",
        "details": "Build weight tracking charts with recharts. Create growth comparison visualizations. Implement trend analysis displays with filters. Build export functionality for reports. Create sharing features for reports. All analytics components must be self-documenting through descriptive names.\n\n**MANDATORY DOCUMENTATION REFERENCES:**\n- Follow frontend data visualization patterns from docs/project-plan.md Phase 4 requirements\n- Use analytics API endpoints configured in docs/environment-variables.md\n- Implement comprehensive testing using AAA pattern per docs/testing-strategy.md",
        "testStrategy": "Charts render correctly, exports work, sharing functions properly, testing follows AAA pattern from docs/testing-strategy.md, and analytics code contains no comments",
        "priority": "medium",
        "dependencies": [
          "17",
          "18"
        ],
        "status": "pending",
        "subtasks": [],
        "complexity": 5,
        "recommendedSubtasks": 3,
        "expansionPrompt": "Break down this task with a focus on implement analytics and reports frontend."
      },
      {
        "id": "28",
        "title": "Implement PWA features",
        "description": "Configure Progressive Web App capabilities",
        "details": "Configure Vite PWA plugin with proper manifest. Set up service worker for offline caching. Create app manifest with icons and metadata. Implement offline data synchronization. Build app install prompts and badges. All PWA configuration must be self-explanatory through clear structure and naming.\n\n**MANDATORY DOCUMENTATION REFERENCES:**\n- Follow PWA implementation patterns from docs/project-plan.md Phase 5 mobile optimization requirements\n- Configure service worker caching for API endpoints from docs/environment-variables.md\n- Implement comprehensive PWA testing using AAA pattern per docs/testing-strategy.md",
        "testStrategy": "App installs as PWA, works offline, sync resumes when online, testing follows AAA pattern from docs/testing-strategy.md, and PWA configuration is comment-free",
        "priority": "medium",
        "dependencies": [
          "23"
        ],
        "status": "pending",
        "subtasks": [],
        "complexity": 5,
        "recommendedSubtasks": 3,
        "expansionPrompt": "Break down this task with a focus on implement pwa features."
      },
      {
        "id": "29",
        "title": "Build mobile-first responsive UI",
        "description": "Optimize all interfaces for mobile devices",
        "details": "Create mobile navigation components with drawer. Implement touch gestures for interactions. Build mobile-optimized forms with better UX. Create responsive layouts for all features. Implement mobile-specific UI patterns. All mobile components must be self-documenting through clear naming and structure.\n\n**MANDATORY DOCUMENTATION REFERENCES:**\n- Follow mobile-first design patterns from docs/project-plan.md Phase 5 mobile optimization requirements\n- Ensure responsive design works with environment configuration from docs/environment-variables.md\n- Implement comprehensive mobile testing using AAA pattern per docs/testing-strategy.md",
        "testStrategy": "All interfaces work properly on mobile devices and tablets, testing follows AAA pattern from docs/testing-strategy.md, and mobile code contains no comments",
        "priority": "high",
        "dependencies": [
          "23"
        ],
        "status": "pending",
        "subtasks": [],
        "complexity": 5,
        "recommendedSubtasks": 3,
        "expansionPrompt": "Break down this task with a focus on build mobile-first responsive ui."
      },
      {
        "id": "30",
        "title": "Complete API integration and testing",
        "description": "Connect frontend to backend with comprehensive testing",
        "details": "Connect all frontend components to backend APIs. Implement error handling and retry logic. Build loading states and skeleton screens. Create integration tests for API endpoints. Implement E2E testing with Playwright. All integration code must be self-documenting through clear service and hook names.\n\n**MANDATORY DOCUMENTATION REFERENCES:**\n- Follow integration testing patterns from docs/project-plan.md Phase 6 system integration requirements\n- Use API configuration and error handling guidelines from docs/environment-variables.md\n- Implement comprehensive E2E testing using Playwright and AAA pattern per docs/testing-strategy.md",
        "testStrategy": "All API calls work correctly, error handling functions, tests pass, comprehensive testing follows AAA pattern from docs/testing-strategy.md, and integration code is comment-free",
        "priority": "high",
        "dependencies": [
          "8",
          "9",
          "10",
          "11",
          "23"
        ],
        "status": "pending",
        "subtasks": [],
        "complexity": 5,
        "recommendedSubtasks": 3,
        "expansionPrompt": "Break down this task with a focus on complete api integration and testing."
      },
      {
        "id": "31",
        "title": "Performance optimization and deployment",
        "description": "Optimize performance and set up production deployment",
        "details": "Implement code splitting and lazy loading. Optimize bundle sizes with analysis. Set up image optimization. Implement caching strategies. Configure CI/CD pipeline. Set up frontend deployment (Vercel) and backend deployment (Railway/Render). All optimization and deployment configuration must be self-explanatory.\n\n**MANDATORY DOCUMENTATION REFERENCES:**\n- Follow deployment strategies from docs/project-plan.md Phase 6 deployment requirements\n- Configure production environment variables following docs/environment-variables.md production guidelines\n- Implement performance testing using patterns from docs/testing-strategy.md",
        "testStrategy": "Performance metrics meet targets, deployments succeed, monitoring active, testing follows AAA pattern from docs/testing-strategy.md, and deployment configuration contains no comments",
        "priority": "high",
        "dependencies": [
          "30"
        ],
        "status": "pending",
        "subtasks": [],
        "complexity": 5,
        "recommendedSubtasks": 3,
        "expansionPrompt": "Break down this task with a focus on performance optimization and deployment."
      },
      {
        "id": "32",
        "title": "Setup comprehensive testing infrastructure",
        "description": "Implement complete testing strategy with Mocha (BE), Vitest (FE), and Playwright (E2E)",
        "details": "Configure testing frameworks for all layers: Backend unit/integration tests with Mocha+Chai, Frontend component tests with Vitest, E2E tests with Playwright. Focus on behavior testing over mocking. Set up test coverage reporting and CI/CD integration.",
        "testStrategy": "All test suites run successfully, coverage reports generated, E2E tests pass in CI/CD",
        "priority": "high",
        "dependencies": [],
        "status": "done",
        "subtasks": [
          {
            "id": 1,
            "title": "Setup Backend testing with Mocha + Chai",
            "description": "Configure Mocha and Chai for backend unit and integration testing",
            "dependencies": [],
            "details": "Install mocha, chai, chai-http, sinon. Configure test scripts in package.json. Set up test database for integration tests. Create test utilities and helpers.",
            "status": "done",
            "testStrategy": "Mocha tests run successfully, test database setup works",
            "parentId": "32",
            "updatedAt": "2025-10-02T10:20:00.922Z"
          },
          {
            "id": 2,
            "title": "Setup Frontend testing with Vitest",
            "description": "Configure Vitest for React component and utility testing",
            "dependencies": [],
            "details": "Install vitest, @testing-library/react, @testing-library/jest-dom, jsdom. Configure vitest.config.ts. Set up test utilities and custom render functions.",
            "status": "done",
            "testStrategy": "Vitest tests run successfully, React components render correctly",
            "parentId": "32",
            "updatedAt": "2025-10-02T13:12:22.570Z"
          },
          {
            "id": 3,
            "title": "Setup Playwright E2E testing",
            "description": "Configure Playwright for end-to-end testing with browser MCP integration",
            "dependencies": [],
            "details": "Install playwright, configure playwright.config.ts. Set up browser MCP integration for automated testing. Create E2E test utilities and page objects.",
            "status": "done",
            "testStrategy": "Playwright tests run successfully, browser MCP integration works",
            "parentId": "32",
            "updatedAt": "2025-10-02T13:23:52.339Z"
          },
          {
            "id": 4,
            "title": "Implement test coverage reporting",
            "description": "Set up comprehensive test coverage reporting for all test types",
            "dependencies": [
              "32.1",
              "32.2"
            ],
            "details": "Configure coverage tools: nyc for Mocha, @vitest/coverage for Vitest. Set up coverage thresholds and reporting. Integrate with CI/CD for coverage tracking.",
            "status": "done",
            "testStrategy": "Coverage reports generated, thresholds met, CI/CD integration works",
            "parentId": "32",
            "updatedAt": "2025-10-02T13:30:20.311Z"
          },
          {
            "id": 5,
            "title": "Create comprehensive test suites",
            "description": "Write extensive test suites for all business logic and critical paths",
            "dependencies": [
              "32.1",
              "32.2",
              "32.3"
            ],
            "details": "Write unit tests for all services, utilities, and business logic. Create integration tests for API endpoints. Write component tests for React components. Create E2E tests for critical user flows.",
            "status": "done",
            "testStrategy": "All business logic covered by tests, critical user flows tested end-to-end",
            "parentId": "32",
            "updatedAt": "2025-10-02T16:40:12.449Z"
          }
        ],
        "updatedAt": "2025-10-02T16:40:12.449Z"
      },
      {
        "id": "33",
        "title": "Implement Backend unit and integration tests",
        "description": "Write comprehensive tests for all backend services, controllers, and business logic",
        "details": "Create unit tests for all services (puppies, feeding, notifications, analytics). Write integration tests for API endpoints. Test database operations and external service integrations. Focus on behavior testing over mocking. All test code must use only AAA comments for structure - no other comments allowed.\n\n**MANDATORY DOCUMENTATION REFERENCES:**\n- Follow backend testing strategy with Mocha + Chai from docs/testing-strategy.md\n- Use AAA pattern and in-memory providers as specified in docs/testing-strategy.md backend testing guidelines\n- Test environment configuration following docs/environment-variables.md test setup procedures",
        "testStrategy": "All backend services have >90% test coverage, integration tests pass, following AAA pattern and behavior testing approach from docs/testing-strategy.md, and test code contains only AAA comments",
        "priority": "high",
        "dependencies": [
          "32.1"
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": "34",
        "title": "Implement Frontend component and utility tests",
        "description": "Write comprehensive tests for React components, hooks, and utility functions",
        "details": "Create component tests for all UI components. Test custom hooks and utility functions. Write integration tests for complex user interactions. Test form validation and state management. All test code must use only AAA comments for structure - no explanatory comments in test logic.\n\n**MANDATORY DOCUMENTATION REFERENCES:**\n- Follow frontend testing strategy with Vitest from docs/testing-strategy.md\n- Use AAA pattern and behavior testing focus as specified in docs/testing-strategy.md frontend testing guidelines\n- Test components in isolation with proper environment setup from docs/environment-variables.md",
        "testStrategy": "All React components have tests, utility functions covered, user interactions tested, following AAA pattern and behavior testing from docs/testing-strategy.md, and test code contains only AAA comments",
        "priority": "high",
        "dependencies": [
          "32.2"
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": "35",
        "title": "Implement E2E tests for critical user flows",
        "description": "Create end-to-end tests for complete user journeys using Playwright",
        "details": "Write E2E tests for user registration, puppy profile creation, feeding schedule setup, notification management, and dashboard interactions. Test cross-browser compatibility and responsive design. All test code must use only AAA comments for structure.\n\n**MANDATORY DOCUMENTATION REFERENCES:**\n- Follow E2E testing strategy with Playwright from docs/testing-strategy.md\n- Use browser MCP integration and cross-browser testing as specified in docs/testing-strategy.md E2E guidelines\n- Configure test environment following docs/environment-variables.md test setup procedures",
        "testStrategy": "All critical user flows tested end-to-end, cross-browser compatibility verified, following comprehensive E2E strategy from docs/testing-strategy.md, and test code contains only AAA comments",
        "priority": "high",
        "dependencies": [
          "32.3"
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": "36",
        "title": "Define comprehensive E2E testing strategy for FE + BE integration",
        "description": "Establish complete end-to-end testing framework with environment setup, database management, authentication flows, critical user journeys, API integration testing, cross-browser support, and CI/CD integration for comprehensive system validation.",
        "details": "Implement comprehensive E2E testing strategy building on existing Playwright infrastructure:\n\n**1. Test Environment Setup**\n- Configure dedicated test environment with isolated frontend (localhost:5174) and backend (localhost:3002) instances\n- Set up test-specific environment variables in `.env.test` with proper database isolation\n- Create Docker Compose configuration for consistent test environment across local and CI\n- Implement test environment health checks and startup/teardown scripts\n\n**2. Database Setup and Seeding**\n- Create separate test database instance with automated migration and seeding\n- Implement database cleanup and reset between test suites using transactions or database recreation\n- Build test data factories for consistent, realistic test data (users, puppies, feeding schedules)\n- Set up database connection pooling and isolation for parallel test execution\n\n**3. Authentication Flow Testing**\n- Test complete user registration, login, logout flows\n- Validate JWT token handling, refresh token mechanisms\n- Test password reset and email verification flows\n- Verify session persistence and security boundaries\n\n**4. Critical User Journey Testing**\n- **Puppy Management**: Registration → Profile creation → Medical history → Weight tracking\n- **Feeding Schedules**: Creation → Modification → Notifications → Completion tracking\n- **Dashboard Interactions**: Navigation → Data visualization → Quick actions\n- **Notifications**: Creation → Delivery → User preferences → Read/unread states\n\n**5. API Integration Testing**\n- Test all CRUD operations for puppies, feeding, notifications, analytics modules\n- Validate request/response formats, error handling, and status codes\n- Test file upload functionality (puppy photos, medical documents)\n- Verify real-time features using WebSocket/SSE connections\n\n**6. Cross-Browser Testing Setup**\n- Configure Playwright for Chrome, Firefox, Safari, and mobile viewports\n- Implement responsive design testing across device types\n- Set up browser-specific configuration and capability testing\n- Create visual regression testing for UI consistency\n\n**7. CI/CD Integration**\n- Extend existing GitHub Actions workflow with E2E test stage\n- Configure test parallelization and retry mechanisms\n- Implement test result reporting with screenshots/videos on failure\n- Set up test environment provisioning and cleanup in CI\n- Add E2E test coverage reporting and integration with existing coverage system\n\n**Test Structure:**\n```\ne2e/\n├── fixtures/           # Test data and mock files\n├── page-objects/       # Page object models\n├── tests/\n│   ├── auth/          # Authentication flows\n│   ├── puppies/       # Puppy management\n│   ├── feeding/       # Feeding schedules\n│   ├── notifications/ # Notification system\n│   └── integration/   # Full user journeys\n├── utils/             # Test utilities and helpers\n├── global-setup.ts    # Environment setup\n└── global-teardown.ts # Cleanup\n```\n\nAll test implementation must be self-documenting through clear test names and page object methods. Only AAA comments allowed for test structure.\n\n**MANDATORY DOCUMENTATION REFERENCES:**\n- Follow E2E testing framework from docs/testing-strategy.md with Playwright and browser MCP integration\n- Configure test environment variables following docs/environment-variables.md test setup guidelines\n- Implement testing strategy aligned with docs/project-plan.md Phase 6 integration requirements",
        "testStrategy": "1. Verify test environment spins up both FE and BE correctly with isolated test database, 2. Validate all authentication flows work end-to-end with real JWT tokens, 3. Test complete user journeys from registration to advanced features, 4. Verify API integration with real HTTP calls and database operations, 5. Ensure cross-browser compatibility across Chrome, Firefox, Safari, and mobile, 6. Confirm CI/CD pipeline runs E2E tests successfully with proper reporting, 7. Validate test data seeding and cleanup works consistently, 8. Test error scenarios and edge cases in real environment conditions, following comprehensive E2E strategy from docs/testing-strategy.md, with only AAA comments in test code",
        "status": "pending",
        "dependencies": [
          "2",
          "32",
          "33",
          "34"
        ],
        "priority": "medium",
        "subtasks": []
      },
      {
        "id": "37",
        "title": "Setup i18n internationalization support",
        "description": "Implement comprehensive internationalization infrastructure supporting Polish and English languages with translation management, locale formatting, and RTL/LTR support for both frontend and backend.",
        "details": "Frontend: Install react-i18next, i18next, and i18next-browser-languagedetector. Configure i18next with namespace support for different app sections (common, dashboard, auth, feeding, training). Create translation files in public/locales/{en,pl}/ directories. Implement useTranslation hooks throughout React components. Add language switcher component in main navigation. Configure date-fns locale support for Polish date formatting. Setup number and currency formatting for locale-specific display. Backend: Install i18next, i18next-fs-backend, and i18next-http-middleware for NestJS. Create backend translation files for API responses, validation messages, and email templates. Implement i18n decorator for controller methods. Configure locale detection from Accept-Language headers. Setup email template localization for notifications. Shared: Create TypeScript interfaces for translation keys to ensure type safety. Implement locale persistence in localStorage and user preferences. Setup proper RTL/LTR CSS support with Tailwind directives. Configure build pipeline to validate translation completeness across locales. All i18n implementation must be self-documenting through clear naming and structure.\n\n**MANDATORY DOCUMENTATION REFERENCES:**\n- Follow frontend and backend architecture patterns from docs/project-plan.md for i18n integration\n- Configure locale environment variables following docs/environment-variables.md guidelines\n- Implement comprehensive i18n testing using AAA pattern per docs/testing-strategy.md",
        "testStrategy": "Verify language switching updates all UI text immediately. Test translation key validation prevents missing translations. Confirm date/number formatting respects selected locale. Validate API responses return localized error messages. Test email templates render correctly in both languages. Ensure localStorage persists language preference across sessions, following AAA testing pattern from docs/testing-strategy.md, with all i18n code being comment-free",
        "status": "pending",
        "dependencies": [
          "17",
          "6"
        ],
        "priority": "high",
        "subtasks": []
      },
      {
        "id": "38",
        "title": "Separate marketing website from authenticated app",
        "description": "Create separate applications: marketing website (SSR/SEO optimized) and authenticated dashboard app, both using shared packages with NX monorepo management and Vercel deployment strategy.",
        "details": "1. **Evaluate NX vs Current Bun Workspaces**: Analyze current Bun workspace setup in package.json (workspaces: apps/*, packages/*) and assess migration path to NX monorepo management. Consider benefits of NX build system, dependency graph, and caching vs current setup.\n\n2. **Create Marketing Website (apps/marketing)**:\n   - Initialize Next.js app with App Router for SSR/SEO optimization\n   - Move Index.tsx marketing content to Next.js pages/components\n   - Implement static generation for landing pages, features, pricing\n   - Configure SEO metadata, Open Graph tags, structured data\n   - Set up Tailwind CSS with existing design system from @wag-wise-mentor/ui\n   - Create responsive marketing layouts optimized for conversion\n   - Import shared types from @wag-wise-mentor/shared for API integration\n\n3. **Refactor Dashboard App (apps/dashboard)**:\n   - Extract authenticated routes from current apps/frontend/\n   - Keep React SPA architecture with Vite for optimal user experience\n   - Move Dashboard.tsx and all authenticated pages to new structure\n   - Configure React Router for client-side navigation within dashboard\n   - Maintain existing Supabase auth integration and user session handling\n   - Import UI components from @wag-wise-mentor/ui package\n   - Use shared types from @wag-wise-mentor/shared for consistency\n\n4. **Configure Shared Package Usage**:\n   - Ensure both apps import from @wag-wise-mentor/shared for types, utilities\n   - Update @wag-wise-mentor/ui to support both Next.js SSR and React SPA contexts\n   - Configure proper build dependencies and watch modes for development\n   - Update root package.json scripts for new app structure\n\n5. **Setup Vercel Deployment Strategy**:\n   - Configure vercel.json for monorepo with multiple apps\n   - Set up separate Vercel projects: marketing.wagwisementor.com, app.wagwisementor.com\n   - Configure build commands and environment variables per app\n   - Set up domain routing and redirects between marketing and app\n   - Configure preview deployments for both applications\n\n6. **Maintain Development Workflow**:\n   - Update development scripts to run both apps concurrently\n   - Configure hot reloading for shared package changes\n   - Ensure TypeScript path mappings work across all applications\n   - Update testing configuration for new app structure\n\nAll application separation must be implemented with self-documenting code structure and clear naming conventions.\n\n**MANDATORY DOCUMENTATION REFERENCES:**\n- Follow dual-application architecture strategy from docs/project-plan.md Phase 3 marketing website separation\n- Configure environment variables for both apps following docs/environment-variables.md multi-app guidelines\n- Implement comprehensive testing for both applications using AAA pattern per docs/testing-strategy.md",
        "testStrategy": "Verify both marketing and dashboard apps build successfully and can import shared packages. Test SSR functionality on marketing site with proper SEO metadata rendering. Confirm dashboard app maintains authentication flow and all existing functionality. Validate development workflow with concurrent app serving and shared package hot reloading. Test Vercel deployment configuration with proper domain routing between marketing and authenticated app, following AAA testing pattern from docs/testing-strategy.md, with all application code being comment-free",
        "status": "pending",
        "dependencies": [
          "4",
          "5"
        ],
        "priority": "high",
        "subtasks": []
      },
      {
        "id": "39",
        "title": "Implement Page Object Models for E2E Tests",
        "description": "Implement Page Object Models following Selenium best practices to create maintainable and reusable E2E test architecture. This should be completed before starting E2E tests implementation. Reference: https://www.selenium.dev/documentation/test_practices/encouraged/page_object_models/",
        "details": "",
        "testStrategy": "",
        "status": "pending",
        "dependencies": [
          "6",
          "7"
        ],
        "priority": "high",
        "subtasks": []
      },
      {
        "id": "40",
        "title": "Enforce Git Workflow Requirements",
        "description": "Update all tasks to enforce proper Git workflow: always create feature branches, never commit directly to main, use Pull Requests for all changes",
        "details": "",
        "testStrategy": "",
        "status": "pending",
        "dependencies": [
          "1"
        ],
        "priority": "high",
        "subtasks": []
      }
    ],
    "metadata": {
      "version": "1.0.0",
      "lastModified": "2025-10-16T12:26:51.311Z",
      "taskCount": 41,
      "completedCount": 7,
      "tags": [
        "master"
      ]
    }
  }
}