{
  "master": {
    "tasks": [
      {
        "id": "1",
        "title": "Setup Bun monorepo directory structure",
        "description": "Create monorepo directories and configure Bun workspace in root package.json",
        "details": "Create apps/, packages/, supabase/ directories. Update root package.json with Bun workspace configuration. Move existing src/ content to apps/frontend/. Configure workspaces to include apps/* and packages/*.",
        "testStrategy": "Verify Bun workspace commands work and all directories are properly created",
        "priority": "critical",
        "dependencies": [],
        "status": "done",
        "subtasks": [
          {
            "id": 1,
            "title": "Create monorepo directory structure",
            "description": "Set up the basic directory structure for the monorepo",
            "dependencies": [],
            "details": "Create the following directories: apps/, packages/, supabase/. These will contain the different parts of our monorepo structure.",
            "status": "done",
            "testStrategy": "All directories exist and are properly structured",
            "parentId": "1"
          },
          {
            "id": 2,
            "title": "Configure Bun workspace in package.json",
            "description": "Update root package.json to define workspace structure",
            "dependencies": ["1.1"],
            "details": "Add workspaces configuration to root package.json that includes 'apps/*' and 'packages/*' to enable Bun workspace functionality.",
            "status": "done",
            "testStrategy": "Bun workspace commands recognize all workspace packages",
            "parentId": "1"
          },
          {
            "id": 3,
            "title": "Move existing frontend code to apps/frontend",
            "description": "Relocate current React application to new monorepo structure",
            "dependencies": ["1.2"],
            "details": "Move src/, public/, index.html, and other frontend files to apps/frontend/. Update any relative paths that may have broken.",
            "status": "done",
            "testStrategy": "Frontend application runs successfully from new location",
            "parentId": "1"
          },
          {
            "id": 4,
            "title": "Update package.json scripts for monorepo",
            "description": "Modify scripts to work with new monorepo structure",
            "dependencies": ["1.3"],
            "details": "Update npm/bun scripts in root package.json to handle workspace operations. Add scripts for building, testing, and running different parts of the monorepo.",
            "status": "done",
            "testStrategy": "All scripts run correctly and target appropriate workspace packages",
            "parentId": "1"
          }
        ],
        "updatedAt": "2025-10-02T09:54:42.776Z",
        "complexity": 3,
        "recommendedSubtasks": 4
      },
      {
        "id": "2",
        "title": "Setup comprehensive testing infrastructure",
        "description": "Implement complete testing strategy with Mocha (BE), Vitest (FE), and Playwright (E2E)",
        "details": "Configure testing frameworks for all layers: Backend unit/integration tests with Mocha+Chai, Frontend component tests with Vitest, E2E tests with Playwright. Focus on behavior testing over mocking. Set up test coverage reporting and CI/CD integration.",
        "testStrategy": "All test suites run successfully, coverage reports generated, E2E tests pass in CI/CD",
        "priority": "critical",
        "dependencies": ["1"],
        "status": "done",
        "subtasks": [
          {
            "id": 1,
            "title": "Setup Backend testing with Mocha + Chai",
            "description": "Configure Mocha and Chai for backend unit and integration testing",
            "dependencies": [],
            "details": "Install mocha, chai, chai-http, sinon. Configure test scripts in package.json. Set up test database for integration tests. Create test utilities and helpers.",
            "status": "done",
            "testStrategy": "Mocha tests run successfully, test database setup works",
            "parentId": "2"
          },
          {
            "id": 2,
            "title": "Setup Frontend testing with Vitest",
            "description": "Configure Vitest for React component and utility testing",
            "dependencies": [],
            "details": "Install vitest, @testing-library/react, @testing-library/jest-dom, jsdom. Configure vitest.config.ts. Set up test utilities and custom render functions.",
            "status": "done",
            "testStrategy": "Vitest tests run successfully, React components render correctly",
            "parentId": "2"
          },
          {
            "id": 3,
            "title": "Setup Playwright E2E testing",
            "description": "Configure Playwright for end-to-end testing with browser MCP integration",
            "dependencies": [],
            "details": "Install playwright, configure playwright.config.ts. Set up browser MCP integration for automated testing. Create E2E test utilities and page objects.",
            "status": "done",
            "testStrategy": "Playwright tests run successfully, browser MCP integration works",
            "parentId": "2"
          },
          {
            "id": 4,
            "title": "Implement test coverage reporting",
            "description": "Set up comprehensive test coverage reporting for all test types",
            "dependencies": ["2.1", "2.2"],
            "details": "Configure coverage tools: nyc for Mocha, @vitest/coverage for Vitest. Set up coverage thresholds and reporting. Integrate with CI/CD for coverage tracking.",
            "status": "done",
            "testStrategy": "Coverage reports generated, thresholds met, CI/CD integration works",
            "parentId": "2"
          }
        ],
        "updatedAt": "2025-10-02T17:20:34.817Z",
        "complexity": 5,
        "recommendedSubtasks": 3
      },
      {
        "id": "3",
        "title": "Initialize NestJS backend structure with DDD architecture",
        "description": "Set up NestJS backend with Domain-Driven Design architecture",
        "details": "Generate NestJS application structure with proper DDD layers (Domain, Application, Infrastructure). Configure environment and external integrations. Implement Supabase repository implementations for production.",
        "testStrategy": "Backend starts successfully, all modules load correctly, DDD architecture is properly implemented",
        "priority": "critical",
        "dependencies": ["1"],
        "status": "done",
        "subtasks": [
          {
            "id": 1,
            "title": "Generate NestJS application structure with DDD layers",
            "description": "Create the basic NestJS application with proper DDD architecture",
            "dependencies": [],
            "details": "Generate NestJS application structure with Domain, Application, and Infrastructure layers. Create core module structure with proper separation of concerns.",
            "status": "done",
            "testStrategy": "NestJS application starts successfully with DDD structure",
            "parentId": "3"
          },
          {
            "id": 2,
            "title": "Create core module structure",
            "description": "Set up core modules and configuration",
            "dependencies": ["3.1"],
            "details": "Create core module structure with proper imports and providers. Configure environment and external integrations.",
            "status": "done",
            "testStrategy": "Core modules load correctly and configuration is properly set",
            "parentId": "3"
          },
          {
            "id": 3,
            "title": "Configure environment and external integrations",
            "description": "Set up environment configuration and external service integrations",
            "dependencies": ["3.2"],
            "details": "Configure environment variables and external integrations. Set up Supabase connection and other external services.",
            "status": "done",
            "testStrategy": "Environment configuration works and external services connect properly",
            "parentId": "3"
          },
          {
            "id": 4,
            "title": "Implement Supabase repository implementations for production",
            "description": "Create production-ready Supabase repository implementations",
            "dependencies": ["3.3"],
            "details": "Implement Supabase repository implementations following DDD patterns. Create proper error handling and data mapping.",
            "status": "done",
            "testStrategy": "Supabase repositories work correctly with proper error handling",
            "parentId": "3"
          }
        ],
        "updatedAt": "2025-10-02T17:20:34.817Z",
        "complexity": 5,
        "recommendedSubtasks": 4
      },
      {
        "id": "4",
        "title": "Implement shared type definitions",
        "description": "Create shared types and utilities package for monorepo",
        "details": "Extract and reorganize Supabase database types. Create API DTO interfaces. Build Zod validation schemas. Define application enums and constants. Configure package exports and TypeScript compilation.",
        "testStrategy": "Shared types compile correctly and can be imported by other packages",
        "priority": "critical",
        "dependencies": ["1"],
        "status": "done",
        "subtasks": [
          {
            "id": 1,
            "title": "Extract and reorganize Supabase database types",
            "description": "Create TypeScript types from Supabase database schema",
            "dependencies": [],
            "details": "Extract database types from Supabase schema and organize them in shared package. Create proper TypeScript interfaces for all database entities.",
            "status": "done",
            "testStrategy": "Database types are properly extracted and organized",
            "parentId": "4"
          },
          {
            "id": 2,
            "title": "Create API DTO interfaces",
            "description": "Define Data Transfer Object interfaces for API communication",
            "dependencies": ["4.1"],
            "details": "Create DTO interfaces for API requests and responses. Ensure proper typing for all API endpoints.",
            "status": "done",
            "testStrategy": "API DTOs are properly defined and typed",
            "parentId": "4"
          },
          {
            "id": 3,
            "title": "Build Zod validation schemas",
            "description": "Create Zod validation schemas for data validation",
            "dependencies": ["4.2"],
            "details": "Create Zod schemas for validating API requests and data. Ensure type safety and runtime validation.",
            "status": "done",
            "testStrategy": "Zod schemas validate data correctly",
            "parentId": "4"
          },
          {
            "id": 4,
            "title": "Define application enums and constants",
            "description": "Create application-wide enums and constants",
            "dependencies": ["4.3"],
            "details": "Define enums and constants used across the application. Ensure consistency and type safety.",
            "status": "done",
            "testStrategy": "Enums and constants are properly defined and accessible",
            "parentId": "4"
          },
          {
            "id": 5,
            "title": "Configure package exports and TypeScript compilation",
            "description": "Set up package exports and TypeScript compilation",
            "dependencies": ["4.4"],
            "details": "Configure package.json exports and TypeScript compilation. Ensure proper module resolution and exports.",
            "status": "done",
            "testStrategy": "Package exports work correctly and TypeScript compiles",
            "parentId": "4"
          }
        ],
        "updatedAt": "2025-10-02T17:20:34.817Z",
        "complexity": 4,
        "recommendedSubtasks": 5
      },
      {
        "id": "5",
        "title": "Build authentication backend module",
        "description": "Create authentication system with Supabase integration",
        "details": "Set up NestJS auth module structure with Supabase integration. Implement user authentication endpoints and guards. Build role-based access control system. All authentication logic must be self-documenting through clear naming and structure.",
        "testStrategy": "Authentication endpoints work correctly, guards protect routes, comprehensive testing follows AAA pattern from docs/testing-strategy.md, and authentication code is comment-free",
        "priority": "critical",
        "dependencies": ["3"],
        "status": "pending",
        "subtasks": [
          {
            "id": 1,
            "title": "Set up NestJS auth module structure with Supabase integration",
            "description": "Create authentication module with Supabase integration",
            "dependencies": [],
            "details": "Create AuthModule with Supabase integration. Set up authentication service and configuration. Follow DDD Infrastructure layer patterns from docs/project-plan.md.",
            "status": "pending",
            "testStrategy": "Auth module loads correctly with Supabase integration",
            "parentId": "5"
          },
          {
            "id": 2,
            "title": "Implement user authentication endpoints and guards",
            "description": "Create authentication endpoints and route guards",
            "dependencies": ["5.1"],
            "details": "Implement authentication endpoints for login, logout, and user management. Create route guards for protecting endpoints. Follow DDD Application Layer patterns from docs/project-plan.md.",
            "status": "pending",
            "testStrategy": "Authentication endpoints work correctly and guards protect routes",
            "parentId": "5"
          },
          {
            "id": 3,
            "title": "Build role-based access control system",
            "description": "Implement role-based access control",
            "dependencies": ["5.2"],
            "details": "Create role-based access control system with proper permissions. Implement user roles and permission checking. Follow DDD Domain Services patterns from docs/project-plan.md.",
            "status": "pending",
            "testStrategy": "Role-based access control works correctly",
            "parentId": "5"
          }
        ],
        "updatedAt": "2025-10-02T17:20:34.817Z",
        "complexity": 4,
        "recommendedSubtasks": 3
      },
      {
        "id": "6",
        "title": "Build puppy profile backend module",
        "description": "Create puppy management system with CRUD operations",
        "details": "Create puppy controller with CRUD operations. Implement puppy repository with Supabase integration. Build puppy validation and business logic. Create puppy-related endpoints for weight tracking and profile management. All puppy logic must be self-documenting through clear naming and structure.",
        "testStrategy": "Puppy CRUD operations work correctly, validation functions properly, comprehensive testing follows AAA pattern from docs/testing-strategy.md, and puppy code is comment-free",
        "priority": "critical",
        "dependencies": ["3", "4"],
        "status": "pending",
        "subtasks": [
          {
            "id": 1,
            "title": "Create puppy controller with CRUD operations",
            "description": "Implement REST API endpoints for puppy management",
            "dependencies": [],
            "details": "Create PuppyController with endpoints for creating, reading, updating, and deleting puppies. Include proper validation and error handling. Follow DDD Infrastructure layer patterns from docs/project-plan.md.",
            "status": "pending",
            "testStrategy": "Puppy CRUD endpoints work correctly with proper validation",
            "parentId": "6"
          },
          {
            "id": 2,
            "title": "Implement puppy repository with Supabase integration",
            "description": "Create puppy repository with database operations",
            "dependencies": ["6.1"],
            "details": "Implement PuppyRepository with Supabase integration. Create proper data mapping and error handling. Follow DDD Infrastructure layer patterns from docs/project-plan.md.",
            "status": "pending",
            "testStrategy": "Puppy repository operations work correctly with Supabase",
            "parentId": "6"
          },
          {
            "id": 3,
            "title": "Build puppy validation and business logic",
            "description": "Create puppy validation and business rules",
            "dependencies": ["6.2"],
            "details": "Implement puppy validation rules and business logic. Create domain services for puppy operations. Follow DDD Domain Services patterns from docs/project-plan.md.",
            "status": "pending",
            "testStrategy": "Puppy validation and business logic work correctly",
            "parentId": "6"
          },
          {
            "id": 4,
            "title": "Create puppy-related endpoints for weight tracking and profile management",
            "description": "Implement additional puppy-related endpoints",
            "dependencies": ["6.3"],
            "details": "Create endpoints for weight tracking, profile updates, and puppy management. Include proper validation and business logic. Follow DDD Application Layer patterns from docs/project-plan.md.",
            "status": "pending",
            "testStrategy": "Additional puppy endpoints work correctly",
            "parentId": "6"
          }
        ],
        "updatedAt": "2025-10-02T17:20:34.817Z",
        "complexity": 4,
        "recommendedSubtasks": 4
      },
      {
        "id": "7",
        "title": "Implement feeding backend module",
        "description": "Create feeding schedules and tracking system",
        "details": "Build feeding schedules controller. Create feeding logs tracking service. Implement weight-based portion calculation algorithms. Build food types and assignments management. Create feeding history aggregation endpoints. All calculation logic must be expressed through clear algorithm names and structure.",
        "testStrategy": "Feeding schedules create correctly, portion calculations are accurate, comprehensive testing follows AAA pattern from docs/testing-strategy.md, and business logic is self-documenting",
        "priority": "high",
        "dependencies": ["3", "4", "6"],
        "status": "pending",
        "subtasks": [
          {
            "id": 1,
            "title": "Build feeding schedules controller and management system",
            "description": "Create REST API endpoints for feeding schedule CRUD operations and food type management",
            "dependencies": [],
            "details": "Implement feeding schedules controller with endpoints for creating, reading, updating, and deleting feeding schedules. Build food types management system with CRUD operations for different food items. Create food assignments linking pets to specific food types. Include validation for schedule conflicts and proper error handling. Follow DDD Infrastructure layer patterns from docs/project-plan.md.",
            "status": "pending",
            "testStrategy": "Feeding schedule CRUD operations work correctly with proper validation",
            "parentId": "7"
          },
          {
            "id": 2,
            "title": "Implement feeding logs tracking service and portion calculations",
            "description": "Create feeding logs tracking system with weight-based portion calculation algorithms",
            "dependencies": ["7.1"],
            "details": "Build feeding logs tracking service to record actual feeding events. Implement weight-based portion calculation algorithms that adjust serving sizes based on pet weight, age, and activity level. Create validation for feeding log entries and automatic portion recommendations. Include business logic for calculating optimal feeding amounts. Follow DDD Domain Services patterns from docs/project-plan.md.",
            "status": "pending",
            "testStrategy": "Feeding logs track correctly and portion calculations are accurate",
            "parentId": "7"
          },
          {
            "id": 3,
            "title": "Create feeding history aggregation endpoints",
            "description": "Build API endpoints for feeding history reports and analytics",
            "dependencies": ["7.2"],
            "details": "Implement feeding history aggregation endpoints that provide comprehensive feeding analytics. Create endpoints for daily, weekly, and monthly feeding summaries. Build feeding pattern analysis and trend reporting. Include feeding compliance tracking and missed feeding alerts. Provide data export capabilities for feeding history. Follow DDD Application Layer patterns from docs/project-plan.md.",
            "status": "pending",
            "testStrategy": "Feeding history aggregation endpoints work correctly",
            "parentId": "7"
          }
        ],
        "updatedAt": "2025-10-02T17:20:34.817Z",
        "complexity": 5,
        "recommendedSubtasks": 3
      },
      {
        "id": "8",
        "title": "Build calendar and events backend module",
        "description": "Create event scheduling and calendar system",
        "details": "Create events controller with CRUD operations. Implement recurring event logic and scheduling service. Build Google Calendar integration service. Create event management endpoints for vet appointments, vaccinations, and other puppy-related events. All calendar logic must be self-documenting through clear naming and structure.",
        "testStrategy": "Event CRUD operations work correctly, recurring events function properly, comprehensive testing follows AAA pattern from docs/testing-strategy.md, and calendar code is comment-free",
        "priority": "high",
        "dependencies": ["3", "4", "6"],
        "status": "pending",
        "subtasks": [
          {
            "id": 1,
            "title": "Create events controller with CRUD operations",
            "description": "Implement REST API endpoints for event management",
            "dependencies": [],
            "details": "Create EventsController with endpoints for creating, reading, updating, and deleting events. Include proper validation and error handling. Follow DDD Infrastructure layer patterns from docs/project-plan.md.",
            "status": "pending",
            "testStrategy": "Event CRUD endpoints work correctly with proper validation",
            "parentId": "8"
          },
          {
            "id": 2,
            "title": "Implement recurring event logic and scheduling service",
            "description": "Create recurring event system and scheduling service",
            "dependencies": ["8.1"],
            "details": "Implement recurring event logic for regular appointments and schedules. Create scheduling service for managing event timing and conflicts. Follow DDD Domain Services patterns from docs/project-plan.md.",
            "status": "pending",
            "testStrategy": "Recurring events work correctly and scheduling service functions properly",
            "parentId": "8"
          },
          {
            "id": 3,
            "title": "Build Google Calendar integration service",
            "description": "Create Google Calendar integration for external calendar sync",
            "dependencies": ["8.2"],
            "details": "Implement Google Calendar integration service for syncing events with external calendars. Create proper authentication and API handling. Follow DDD Infrastructure layer patterns from docs/project-plan.md.",
            "status": "pending",
            "testStrategy": "Google Calendar integration works correctly",
            "parentId": "8"
          }
        ],
        "updatedAt": "2025-10-02T17:20:34.817Z",
        "complexity": 4,
        "recommendedSubtasks": 3
      },
      {
        "id": "9",
        "title": "Setup frontend architecture foundation",
        "description": "Configure React frontend with proper architecture and state management",
        "details": "Configure React Router and navigation structure. Set up React Query for API state management. Implement form handling and authentication context. Create proper error handling and loading states. All frontend architecture must be self-documenting through clear naming and structure.",
        "testStrategy": "Frontend architecture works correctly, routing functions properly, comprehensive testing follows AAA pattern from docs/testing-strategy.md, and frontend code is comment-free",
        "priority": "critical",
        "dependencies": ["1", "2"],
        "status": "pending",
        "subtasks": [
          {
            "id": 1,
            "title": "Configure React Router and navigation structure",
            "description": "Set up React Router with proper navigation structure",
            "dependencies": [],
            "details": "Configure React Router with proper route structure. Create navigation components and route guards. Follow frontend architecture patterns from docs/project-plan.md Phase 4 requirements.",
            "status": "pending",
            "testStrategy": "React Router works correctly with proper navigation",
            "parentId": "9"
          },
          {
            "id": 2,
            "title": "Set up React Query for API state management",
            "description": "Configure React Query for API state management",
            "dependencies": ["9.1"],
            "details": "Set up React Query with proper configuration for API state management. Create query hooks and mutation handlers. Follow frontend architecture patterns from docs/project-plan.md Phase 4 requirements.",
            "status": "pending",
            "testStrategy": "React Query works correctly for API state management",
            "parentId": "9"
          },
          {
            "id": 3,
            "title": "Implement form handling and authentication context",
            "description": "Create form handling and authentication context",
            "dependencies": ["9.2"],
            "details": "Implement form handling with proper validation and error handling. Create authentication context for user state management. Follow frontend architecture patterns from docs/project-plan.md Phase 4 requirements.",
            "status": "pending",
            "testStrategy": "Form handling and authentication context work correctly",
            "parentId": "9"
          }
        ],
        "updatedAt": "2025-10-02T17:20:34.817Z",
        "complexity": 4,
        "recommendedSubtasks": 3
      },
      {
        "id": "10",
        "title": "Build comprehensive UI components package",
        "description": "Create reusable UI components package for the application",
        "details": "Move shadcn/ui components to packages/ui structure. Configure UI package build process and exports. Update import paths across application to use UI package. Create additional custom components for puppy management. All UI components must be self-documenting through clear naming and structure.",
        "testStrategy": "UI components work correctly, package exports function properly, comprehensive testing follows AAA pattern from docs/testing-strategy.md, and UI code is comment-free",
        "priority": "critical",
        "dependencies": ["1", "2"],
        "status": "pending",
        "subtasks": [
          {
            "id": 1,
            "title": "Move shadcn/ui components to packages/ui structure",
            "description": "Relocate UI components to packages/ui structure",
            "dependencies": [],
            "details": "Move existing shadcn/ui components to packages/ui structure. Organize components properly and update imports. Follow frontend architecture patterns from docs/project-plan.md Phase 4 requirements.",
            "status": "pending",
            "testStrategy": "UI components are properly organized in packages/ui",
            "parentId": "10"
          },
          {
            "id": 2,
            "title": "Configure UI package build process and exports",
            "description": "Set up build process and exports for UI package",
            "dependencies": ["10.1"],
            "details": "Configure build process and exports for UI package. Ensure proper TypeScript compilation and module exports. Follow frontend architecture patterns from docs/project-plan.md Phase 4 requirements.",
            "status": "pending",
            "testStrategy": "UI package builds correctly and exports work properly",
            "parentId": "10"
          },
          {
            "id": 3,
            "title": "Update import paths across application to use UI package",
            "description": "Update all imports to use UI package",
            "dependencies": ["10.2"],
            "details": "Update all import paths across the application to use the UI package. Ensure proper module resolution and imports. Follow frontend architecture patterns from docs/project-plan.md Phase 4 requirements.",
            "status": "pending",
            "testStrategy": "All imports use UI package correctly",
            "parentId": "10"
          }
        ],
        "updatedAt": "2025-10-02T17:20:34.817Z",
        "complexity": 3,
        "recommendedSubtasks": 3
      },
      {
        "id": "11",
        "title": "Implement puppy profile frontend",
        "description": "Create puppy management interface with registration and profile management",
        "details": "Create puppy registration wizard component. Build breed selection with autocomplete. Implement photo upload with crop/resize. Create puppy profile view and edit forms. Build weight tracking charts. Implement medical history forms. All puppy frontend components must be self-documenting through clear naming and structure.",
        "testStrategy": "Puppy registration works correctly, profile management functions properly, comprehensive testing follows AAA pattern from docs/testing-strategy.md, and puppy frontend code is comment-free",
        "priority": "critical",
        "dependencies": ["9", "10"],
        "status": "pending",
        "subtasks": [
          {
            "id": 1,
            "title": "Create puppy registration wizard component",
            "description": "Build multi-step puppy registration wizard",
            "dependencies": [],
            "details": "Create multi-step puppy registration wizard with proper validation and error handling. Include all necessary fields for puppy registration. Follow frontend architecture patterns from docs/project-plan.md Phase 4 requirements.",
            "status": "pending",
            "testStrategy": "Puppy registration wizard works correctly with proper validation",
            "parentId": "11"
          },
          {
            "id": 2,
            "title": "Build breed selection with autocomplete",
            "description": "Create breed selection component with autocomplete functionality",
            "dependencies": ["11.1"],
            "details": "Build breed selection component with autocomplete functionality. Include proper breed data and search capabilities. Follow frontend architecture patterns from docs/project-plan.md Phase 4 requirements.",
            "status": "pending",
            "testStrategy": "Breed selection with autocomplete works correctly",
            "parentId": "11"
          },
          {
            "id": 3,
            "title": "Implement photo upload with crop/resize",
            "description": "Create photo upload component with crop and resize functionality",
            "dependencies": ["11.2"],
            "details": "Implement photo upload component with crop and resize functionality. Include proper image handling and validation. Follow frontend architecture patterns from docs/project-plan.md Phase 4 requirements.",
            "status": "pending",
            "testStrategy": "Photo upload with crop/resize works correctly",
            "parentId": "11"
          },
          {
            "id": 4,
            "title": "Create puppy profile view and edit forms",
            "description": "Build puppy profile view and edit forms",
            "dependencies": ["11.3"],
            "details": "Create puppy profile view and edit forms with proper validation and error handling. Include all necessary fields for puppy profile management. Follow frontend architecture patterns from docs/project-plan.md Phase 4 requirements.",
            "status": "pending",
            "testStrategy": "Puppy profile view and edit forms work correctly",
            "parentId": "11"
          },
          {
            "id": 5,
            "title": "Build weight tracking charts",
            "description": "Create weight tracking charts and visualization",
            "dependencies": ["11.4"],
            "details": "Build weight tracking charts and visualization components. Include proper data visualization and chart interactions. Follow frontend architecture patterns from docs/project-plan.md Phase 4 requirements.",
            "status": "pending",
            "testStrategy": "Weight tracking charts work correctly",
            "parentId": "11"
          },
          {
            "id": 6,
            "title": "Implement medical history forms",
            "description": "Create medical history forms and management",
            "dependencies": ["11.5"],
            "details": "Implement medical history forms and management components. Include proper validation and data handling. Follow frontend architecture patterns from docs/project-plan.md Phase 4 requirements.",
            "status": "pending",
            "testStrategy": "Medical history forms work correctly",
            "parentId": "11"
          }
        ],
        "updatedAt": "2025-10-02T17:20:34.817Z",
        "complexity": 5,
        "recommendedSubtasks": 6
      },
      {
        "id": "12",
        "title": "Create puppy list and management pages",
        "description": "Build puppy list view and individual puppy dashboard pages",
        "details": "Create puppy list page to display all registered puppies. Build individual puppy dashboard with overview and quick actions. Implement puppy search and filtering functionality. Create puppy deletion and management actions. All puppy management pages must be self-documenting through clear naming and structure.",
        "testStrategy": "Puppy list displays correctly, individual dashboards work properly, comprehensive testing follows AAA pattern from docs/testing-strategy.md, and puppy management code is comment-free",
        "priority": "critical",
        "dependencies": ["9", "10", "11"],
        "status": "pending",
        "subtasks": [
          {
            "id": 1,
            "title": "Create puppy list page to display all registered puppies",
            "description": "Build puppy list page with proper display and actions",
            "dependencies": [],
            "details": "Create puppy list page that displays all registered puppies with proper cards and actions. Include proper loading states and error handling. Follow frontend architecture patterns from docs/project-plan.md Phase 4 requirements.",
            "status": "pending",
            "testStrategy": "Puppy list page displays correctly with proper actions",
            "parentId": "12"
          },
          {
            "id": 2,
            "title": "Build individual puppy dashboard with overview and quick actions",
            "description": "Create individual puppy dashboard page",
            "dependencies": ["12.1"],
            "details": "Build individual puppy dashboard with overview information and quick actions. Include proper navigation and data display. Follow frontend architecture patterns from docs/project-plan.md Phase 4 requirements.",
            "status": "pending",
            "testStrategy": "Individual puppy dashboard works correctly",
            "parentId": "12"
          },
          {
            "id": 3,
            "title": "Implement puppy search and filtering functionality",
            "description": "Add search and filtering to puppy list",
            "dependencies": ["12.2"],
            "details": "Implement puppy search and filtering functionality for the puppy list. Include proper search algorithms and filter options. Follow frontend architecture patterns from docs/project-plan.md Phase 4 requirements.",
            "status": "pending",
            "testStrategy": "Puppy search and filtering work correctly",
            "parentId": "12"
          },
          {
            "id": 4,
            "title": "Create puppy deletion and management actions",
            "description": "Implement puppy deletion and management actions",
            "dependencies": ["12.3"],
            "details": "Create puppy deletion and management actions with proper confirmation dialogs and error handling. Include proper state management and updates. Follow frontend architecture patterns from docs/project-plan.md Phase 4 requirements.",
            "status": "pending",
            "testStrategy": "Puppy deletion and management actions work correctly",
            "parentId": "12"
          }
        ],
        "updatedAt": "2025-10-02T17:20:34.817Z",
        "complexity": 4,
        "recommendedSubtasks": 4
      },
      {
        "id": "13",
        "title": "Implement weight tracking frontend",
        "description": "Create weight tracking interface with charts and data management",
        "details": "Create weight entry form with proper validation. Build weight history chart with trend visualization. Implement weight milestone tracking and alerts. Create weight data export functionality. All weight tracking components must be self-documenting through clear naming and structure.",
        "testStrategy": "Weight tracking works correctly, charts display properly, comprehensive testing follows AAA pattern from docs/testing-strategy.md, and weight tracking code is comment-free",
        "priority": "high",
        "dependencies": ["9", "10", "12"],
        "status": "pending",
        "subtasks": [
          {
            "id": 1,
            "title": "Create weight entry form with proper validation",
            "description": "Build weight entry form with validation",
            "dependencies": [],
            "details": "Create weight entry form with proper validation and error handling. Include date selection and weight input with proper formatting. Follow frontend architecture patterns from docs/project-plan.md Phase 4 requirements.",
            "status": "pending",
            "testStrategy": "Weight entry form works correctly with proper validation",
            "parentId": "13"
          },
          {
            "id": 2,
            "title": "Build weight history chart with trend visualization",
            "description": "Create weight history chart with trend visualization",
            "dependencies": ["13.1"],
            "details": "Build weight history chart with trend visualization and proper data display. Include interactive features and proper chart styling. Follow frontend architecture patterns from docs/project-plan.md Phase 4 requirements.",
            "status": "pending",
            "testStrategy": "Weight history chart works correctly with trend visualization",
            "parentId": "13"
          },
          {
            "id": 3,
            "title": "Implement weight milestone tracking and alerts",
            "description": "Create weight milestone tracking and alert system",
            "dependencies": ["13.2"],
            "details": "Implement weight milestone tracking and alert system for important weight milestones. Include proper notifications and milestone tracking. Follow frontend architecture patterns from docs/project-plan.md Phase 4 requirements.",
            "status": "pending",
            "testStrategy": "Weight milestone tracking and alerts work correctly",
            "parentId": "13"
          },
          {
            "id": 4,
            "title": "Create weight data export functionality",
            "description": "Implement weight data export functionality",
            "dependencies": ["13.3"],
            "details": "Create weight data export functionality for downloading weight history data. Include proper data formatting and export options. Follow frontend architecture patterns from docs/project-plan.md Phase 4 requirements.",
            "status": "pending",
            "testStrategy": "Weight data export functionality works correctly",
            "parentId": "13"
          }
        ],
        "updatedAt": "2025-10-02T17:20:34.817Z",
        "complexity": 4,
        "recommendedSubtasks": 4
      },
      {
        "id": "14",
        "title": "Implement basic feeding schedule frontend",
        "description": "Create feeding schedule management interface",
        "details": "Create feeding schedule setup form with meal planning. Build feeding schedule display with time management. Implement feeding log entry form for tracking actual feedings. Create feeding history view with compliance tracking. All feeding schedule components must be self-documenting through clear naming and structure.",
        "testStrategy": "Feeding schedule works correctly, feeding logs track properly, comprehensive testing follows AAA pattern from docs/testing-strategy.md, and feeding schedule code is comment-free",
        "priority": "high",
        "dependencies": ["9", "10", "12"],
        "status": "pending",
        "subtasks": [
          {
            "id": 1,
            "title": "Create feeding schedule setup form with meal planning",
            "description": "Build feeding schedule setup form",
            "dependencies": [],
            "details": "Create feeding schedule setup form with meal planning and proper validation. Include meal timing, portion sizes, and food type selection. Follow frontend architecture patterns from docs/project-plan.md Phase 4 requirements.",
            "status": "pending",
            "testStrategy": "Feeding schedule setup form works correctly",
            "parentId": "14"
          },
          {
            "id": 2,
            "title": "Build feeding schedule display with time management",
            "description": "Create feeding schedule display component",
            "dependencies": ["14.1"],
            "details": "Build feeding schedule display with time management and proper visualization. Include schedule overview and time-based organization. Follow frontend architecture patterns from docs/project-plan.md Phase 4 requirements.",
            "status": "pending",
            "testStrategy": "Feeding schedule display works correctly",
            "parentId": "14"
          },
          {
            "id": 3,
            "title": "Implement feeding log entry form for tracking actual feedings",
            "description": "Create feeding log entry form",
            "dependencies": ["14.2"],
            "details": "Implement feeding log entry form for tracking actual feedings with proper validation and data entry. Include portion tracking and feeding notes. Follow frontend architecture patterns from docs/project-plan.md Phase 4 requirements.",
            "status": "pending",
            "testStrategy": "Feeding log entry form works correctly",
            "parentId": "14"
          },
          {
            "id": 4,
            "title": "Create feeding history view with compliance tracking",
            "description": "Build feeding history view with compliance tracking",
            "dependencies": ["14.3"],
            "details": "Create feeding history view with compliance tracking and proper data visualization. Include feeding patterns and compliance metrics. Follow frontend architecture patterns from docs/project-plan.md Phase 4 requirements.",
            "status": "pending",
            "testStrategy": "Feeding history view works correctly with compliance tracking",
            "parentId": "14"
          }
        ],
        "updatedAt": "2025-10-02T17:20:34.817Z",
        "complexity": 4,
        "recommendedSubtasks": 4
      },
      {
        "id": "15",
        "title": "Implement simple calendar frontend",
        "description": "Create basic calendar interface for events and appointments",
        "details": "Create calendar component using react-day-picker. Build event creation/editing modal forms. Implement basic event management with vet appointments and vaccinations. Create calendar view with event display. All calendar components must be self-documenting through clear naming and structure.",
        "testStrategy": "Calendar displays events correctly, event creation works, comprehensive testing follows AAA pattern from docs/testing-strategy.md, and calendar code is comment-free",
        "priority": "high",
        "dependencies": ["9", "10", "12"],
        "status": "pending",
        "subtasks": [
          {
            "id": 1,
            "title": "Create calendar component using react-day-picker",
            "description": "Build calendar component with react-day-picker",
            "dependencies": [],
            "details": "Create calendar component using react-day-picker with proper styling and functionality. Include proper date selection and event display. Follow frontend architecture patterns from docs/project-plan.md Phase 4 requirements.",
            "status": "pending",
            "testStrategy": "Calendar component works correctly with react-day-picker",
            "parentId": "15"
          },
          {
            "id": 2,
            "title": "Build event creation/editing modal forms",
            "description": "Create event creation and editing modal forms",
            "dependencies": ["15.1"],
            "details": "Build event creation and editing modal forms with proper validation and error handling. Include all necessary fields for event management. Follow frontend architecture patterns from docs/project-plan.md Phase 4 requirements.",
            "status": "pending",
            "testStrategy": "Event creation/editing modal forms work correctly",
            "parentId": "15"
          },
          {
            "id": 3,
            "title": "Implement basic event management with vet appointments and vaccinations",
            "description": "Create basic event management functionality",
            "dependencies": ["15.2"],
            "details": "Implement basic event management with vet appointments and vaccinations. Include proper event categorization and management. Follow frontend architecture patterns from docs/project-plan.md Phase 4 requirements.",
            "status": "pending",
            "testStrategy": "Basic event management works correctly",
            "parentId": "15"
          },
          {
            "id": 4,
            "title": "Create calendar view with event display",
            "description": "Build calendar view with proper event display",
            "dependencies": ["15.3"],
            "details": "Create calendar view with proper event display and visualization. Include event details and proper calendar navigation. Follow frontend architecture patterns from docs/project-plan.md Phase 4 requirements.",
            "status": "pending",
            "testStrategy": "Calendar view with event display works correctly",
            "parentId": "15"
          }
        ],
        "updatedAt": "2025-10-02T17:20:34.817Z",
        "complexity": 4,
        "recommendedSubtasks": 4
      },
      {
        "id": "16",
        "title": "Complete API integration and testing",
        "description": "Connect frontend to backend with comprehensive testing",
        "details": "Connect all frontend components to backend APIs. Implement error handling and retry logic. Build loading states and skeleton screens. Create integration tests for API endpoints. Implement E2E testing with Playwright. All integration code must be self-documenting through clear service and hook names.",
        "testStrategy": "All API calls work correctly, error handling functions, tests pass, comprehensive testing follows AAA pattern from docs/testing-strategy.md, and integration code is comment-free",
        "priority": "critical",
        "dependencies": ["5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15"],
        "status": "pending",
        "subtasks": [
          {
            "id": 1,
            "title": "Connect all frontend components to backend APIs",
            "description": "Create API integration layer for frontend-backend communication",
            "dependencies": [],
            "details": "Create API integration layer for frontend-backend communication. Implement proper API client services and data fetching. Follow integration testing patterns from docs/project-plan.md Phase 6 system integration requirements.",
            "status": "pending",
            "testStrategy": "Frontend components connect correctly to backend APIs",
            "parentId": "16"
          },
          {
            "id": 2,
            "title": "Implement error handling and retry logic",
            "description": "Create comprehensive error handling and retry logic",
            "dependencies": ["16.1"],
            "details": "Implement comprehensive error handling and retry logic for API calls. Include proper error states and user feedback. Follow integration testing patterns from docs/project-plan.md Phase 6 system integration requirements.",
            "status": "pending",
            "testStrategy": "Error handling and retry logic work correctly",
            "parentId": "16"
          },
          {
            "id": 3,
            "title": "Build loading states and skeleton screens",
            "description": "Create loading states and skeleton screens for better UX",
            "dependencies": ["16.2"],
            "details": "Build loading states and skeleton screens for better user experience. Include proper loading indicators and skeleton components. Follow integration testing patterns from docs/project-plan.md Phase 6 system integration requirements.",
            "status": "pending",
            "testStrategy": "Loading states and skeleton screens work correctly",
            "parentId": "16"
          },
          {
            "id": 4,
            "title": "Create integration tests for API endpoints",
            "description": "Build comprehensive integration tests for API endpoints",
            "dependencies": ["16.3"],
            "details": "Create comprehensive integration tests for API endpoints. Include proper test coverage and validation. Follow integration testing patterns from docs/project-plan.md Phase 6 system integration requirements.",
            "status": "pending",
            "testStrategy": "Integration tests for API endpoints pass correctly",
            "parentId": "16"
          },
          {
            "id": 5,
            "title": "Implement E2E testing with Playwright",
            "description": "Create end-to-end tests with Playwright",
            "dependencies": ["16.4"],
            "details": "Implement end-to-end tests with Playwright for complete user flows. Include proper test scenarios and validation. Follow integration testing patterns from docs/project-plan.md Phase 6 system integration requirements.",
            "status": "pending",
            "testStrategy": "E2E tests with Playwright pass correctly",
            "parentId": "16"
          }
        ],
        "updatedAt": "2025-10-02T17:20:34.817Z",
        "complexity": 5,
        "recommendedSubtasks": 5
      }
    ]
  }
}
